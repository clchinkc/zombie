
Zombie Simulation Project
Showcase my python understanding
And my ability to build clean pure python code
# advanced: pygame

Portfolio Website Project
Showcase my html, css, and javascript understanding
And the ability to combine frontend and backend# advanced: react, portfolio github

Some other projects that I can do to showcase other skills

Simple projects: low complexity (do less than 5 things, <200 lines, no libraries), high visibility, do betweeen 4-8
Digital clock + to-do list (番茄鐘+待辦清單) -> budget and expense tracker
+ calculator + data analysis -> budget and expense planner

Intermediate projects: medium complexity (do more than 5 things, <500 lines, minimal use of libraries or frameworks), do between 3-5
Video games, like space invaders, snake, tetris, pong, tic-tac-tor, etc.
stock market simulator -> stock market simulator with strategy to buy and sell stocks based on data analysis and ability to backtest
Craigslist webscraper -> craigslist webscraper with gui
Quiz app -> quiz app with database
note app -> note app with encryption
visualize complexity python / sorting algorithm visualizer
stock prediction github

Capstone projects: high complexity (put everything together, >500 lines, use integrations, like frontend, backend, database, api, software, multiple libraries and frameworks), cool to put on cv, more interesting than existing solutions, do between 1-3
Social media clones, like twitter, discord, reddit, etc.
Ecommerce store and website

Docker + Compose + Python
web scrape + yfinance api + lstm model + plotly


Project ideas
A website like quilbot that rephrase sentences where a population of text similar to input text is held and the best fit is optimised using genetic algorithm, fitness is document level text similarity, gene is word

story writing app that emphasize both writing and reading, version control like github, final goal is that every reader can submit their own version of any part of the story and share their revised story based on their's story


**Wikipedia Explorer App**

**Project Overview:**  
Design and implement an intuitive application that enables users to delve into the vast content of Wikipedia in a fun and exploratory manner. Users should be able to unearth random Wikipedia articles, navigate through them based on preference, and immerse themselves in a chain of interconnected articles.

**Primary Objectives:**  
1. **Random Article Discovery:** At the tap of a button, present users with a random Wikipedia article.
2. **Categorized Exploration:** Allow users to select specific categories of interest and present articles only from those categories.
3. **Rabbit Hole Exploration:** Give users the thrill of a connected reading journey. Upon choosing this mode, every clicked link within an article should lead to another random article from within those linked articles.

**Technical Requirements:**  
1. **App Architecture Planning:** Chart out the app's structure, determining the most suitable programming language and framework.
2. **Leverage Wikipedia API:** Harness the Wikipedia API to fetch articles, categories, and internal links.
3. **Random Page Generator:** Develop a function that extracts a random Wikipedia article and showcases it.
4. **Category-wise Article Generation:** Create a feature where users can cherry-pick their areas of interest, after which they'll be shown a random article from the chosen category.
5. **Rabbit Hole Mode Development:** Implement the feature that offers users an exploratory journey through interconnected articles.
6. **UI/UX Design:** Design an intuitive and engaging interface, ensuring smooth and straightforward navigation.
7. **Quality Assurance:** Conduct thorough testing to guarantee flawless functionality, followed by iterations based on feedback.
8. **Deployment:** Make the application accessible by deploying it on the web or as a mobile application.

**Optional Features:**  
1. **Personalized Libraries:** Equip users with the option to bookmark their adored articles, paving the way for a bespoke Wikipedia library.
2. **Article Search:** Incorporate a search bar allowing users to hunt down specific articles effortlessly.
3. **Social Sharing:** Integrate social media sharing capabilities, enabling users to share their findings across various platforms.

**Final Thoughts:**  
This project combines the information powerhouse of Wikipedia with the excitement of exploration. It offers users an educationally thrilling journey, whether they're diving into random discoveries, seeking specific categories, or embarking on a linked-article odyssey. Happy exploring!


Content Aggregator
The internet is filled with websites, articles, and information. When we want to find something, it is tough to go through each of them. For this use, you can create a content aggregator that automatically searches popular websites and looks for relevant content and then complies with all the content and lets the user choose which content they want. It is very much like Google but unbiased. And this is the perfect idea for your next python project!


YouTube video downloader
One of the best ideas to start experimenting with your hands-on python projects for students is working on a YouTube video downloader. This is the best example of introducing python to beginners in a fun way. More than a billion people watch YouTube every month. Sometimes there are videos we like to download permanently. YouTube doesn’t give you that option, but you can create an app with a simple UI and the ability to download YouTube videos in different formats and video quality. This project looks tough, but it is straightforward when you start working on it.


Expense Tracker
As you can guess by the name, an expense tracker is a software application that lets you keep track of your expenses, and even analyze the expenses. In this python project, you will build a simple expense tracker that can keep track of the user’s expenses. Expense tracker is one of the trending python projects which should also be able to perform statistical analysis to give accurate insights to users on their expenses so that they can plan their expenses better. You can use PySimpleGUI to create the interface for this application, and even Python libraries like Pandas and Matplotlib can be handy tools for the project.


One project ideda is a multi-player online card game. You could incorporate your knowledge of object-oriented programming, GUI design, and algorithm design to create a fun and engaging game that allows players to compete against each other in a virtual card game. The game could feature a variety of card games, including blackjack, poker, and other popular games, and could utilize a similar GUI and back-end design as the previous projects. Additionally, the game could include features such as real-time chat, leaderboards, and the ability to customize avatars and game settings. This project would be a great way to demonstrate your skills in Python and showcase your ability to build complex, interactive applications.

Another project idea could be a text-based adventure game. This project would involve creating a story with multiple branching paths and choices for the player to make, and implementing a system for tracking the player's progress and displaying the appropriate outcomes based on their choices. This project would involve using object-oriented programming to create the various characters and objects in the game, as well as implementing a system for handling user input and displaying the game's text. Additionally, the game could include features such as a save/load system, multiple endings, and a scoring system. This project would be a great way to showcase your creativity and storytelling abilities, as well as your skills in Python and object-oriented programming.

This Python project uses the tkinter library to create a simple text editor with a Graphical User Interface (GUI). The text editor allows users to open and save files, featuring standard GUI components such as labels, buttons, and entry fields. The code demonstrates how to use tkinter to build the interface, as well as how to implement file handling for opening and saving files. This project is a great way to learn about file handling and GUI programming, and can be further expanded by adding more features like a "find word" function.


Post-it Notes
Post-it notes are an excellent way to note down trivial chores so that you don’t forget to do them. In this project, we’ll make a virtual version of the physical, adhesive post-it notes. The main goal of building this application is to allow users to carry their post-it notes wherever they go (since it is on a digital platform). The application should have an option for account creation, different layouts for post-it notes, and a categorization feature to allow users to segment their notes. You can consider using Django for this project since it has an in-built user authentication feature.


Plagiarism Checker
Content writing is one of the most prolific online businesses. The market lacks a free tool that can be used to check for plagiarism in documents. You can use a natural language processing library along with the Google search API to create a program that searches the first few pages of Google and checks for plagiarism.




A project that can showcase your understanding of these concepts could be a pathfinding visualization tool that allows users to interact with different algorithms and data structures to find the shortest path between two points in a graph. Here are some suggestions on how you can incorporate the different concepts:
1. Sorting algorithms: You can use a sorting algorithm to sort the nodes in the graph or the edges based on their weight.
2. Search algorithms: You can use search algorithms like BFS or DFS to explore the graph and find the shortest path between two points.
3. Graph algorithms: You can implement graph algorithms like Dijkstra's algorithm or A* algorithm to find the shortest path between two points in the graph.
4. Dynamic programming: You can use dynamic programming to optimize the search for the shortest path by storing the solutions to subproblems and reusing them.
5. Greedy algorithms: You can use a greedy algorithm to choose the next node to visit based on its distance from the start node.
6. Divide and Conquer: You can use divide and conquer to split the graph into smaller subgraphs to solve the problem.
7. Backtracking: You can use backtracking to explore all possible paths in the graph to find the shortest path.
8. Randomized Algorithm: You can use a randomized algorithm to introduce some randomness in the search process, which can help avoid getting stuck in local optima.
9. Graph and Tree: You can use graph and tree data structures to represent the graph and implement the different algorithms.
10. Queue and Array: You can use queue and array data structures to implement the search algorithms and store the nodes to be visited.
With these concepts in mind, you can create a project that allows users to visualize the different algorithms and data structures in action and compare their performance in finding the shortest path between two points in a graph.


MyTop100Movies - API,Database,CRUD - Application which lets users set their top 100 movies. Movies could come from an API like The Movie Database (http://tmdb.org). Should allow for users to add a movie, list and rank their movie selections. Start with basic CRUD for movies and add features.

ScheduleMaker - This one's harder. Can develop the database schema or an application. Let one user define the schedule for others. Or let users select their own schedule.

Weather Logger - Build the standard weather widget API project but add the ability to log the current weather data and to view historical data. Bonus points if it's accessible programmatically. https://www.ncdc.noaa.gov/cdo-web/webservices/v2

oAuth Login - Recommend this one because it can replace a user system in some of these examples. Numerous libraries exist for setting this up.

CRUD sites

RESTful API - use the same list from the CRUD sites but make it available as an API.

Build some Data Models - People of importance or historical, whichever you like. Can use http://databaseanswers.org as a starting point with people and citizen data models : http://www.databaseanswers.org/data_models/people.htm , http://www.databaseanswers.org/data_models/citizens/index.htm

Workflow Application - Design a system which requires interaction between users. Simplest example would be author > editor with the object being passed is an article. Author submits article, editor approves or rejects it.

Web scrape youtube views or spotify streams using docket virtual machine continuously



GUI programming, algorithm design, string manipulation, multi-thread, database management, and data processing


Project suggestions
hardcore basic apps or useful apps
https://github.com/vicky002/1000_Projects
https://www.crio.do/blog/python-projects-for-developers/
Django 搭建简易博客
Flask 开发轻博客
https://zhuanlan.zhihu.com/p/95526617
https://www.analyticsinsight.net/top-10-python-data-science-courses-and-boot-camps-to-know-in-2023/
https://medium.com/pipeline-a-data-engineering-resource/creating-the-dashboard-that-got-me-a-data-analyst-job-offer-de3f0d6b1771
https://www.youtube.com/watch?v=jl5yUEdekEM&ab_channel=TechWithTim
https://github.com/AsmrProg-YT/100-days-of-javascript
https://www.youtube.com/watch?v=54XyRw9y8oE
https://www.projectpro.io/projects/data-science-projects
https://builtin.com/data-science/data-science-projects
https://data-flair.training/blogs/data-science-project-ideas/
https://www.interviewbit.com/blog/data-science-projects/
https://github.com/kiteco/python-youtube-code
https://www.programcreek.com/python/?action=search_project
tk text editor add textblob and pyspellchecker spellcheck, add autocomplete, add nltk sentiment analysis
https://www.usandopy.com/en/artigo/how-to-build-a-pokedex-in-python-python-project-part-01/
https://www.pycob.com/gallery?tag=Featured
https://github.com/pycob/sample-apps
https://projectgurukul.org/python-to-do-list/
https://pythongeeks.org/python-currency-converter/
https://medium.datadriveninvestor.com/writing-a-chess-program-in-one-hour-with-chatgpt-67e7ec56ba5d
https://andreasstckl.medium.com/writing-a-chess-program-in-one-day-30daff4610ec
https://github.com/mkaramica?tab=repositories
https://github.com/SkalskiP/ILearnDeepLearning.py
https://www.dataquest.io/blog/datadotworld-python-tutorial/
https://www.dataquest.io/blog/free-datasets-for-projects/
https://b-cd.net/youtube vercel website
https://realpython.com/intermediate-python-project-ideas/
https://github.com/karan/Projects
https://www.ece.rutgers.edu/~marsic/books/SE/projects/MinorityGame/
https://www.ece.rutgers.edu/~marsic/books/SE/projects/TradingLeague/
https://www.ece.rutgers.edu/~marsic/books/SE/
https://www.ece.rutgers.edu/~marsic/books/SE/projects/StockForecasters/
https://austinhenley.com/blog/challengingprojects.html
https://github.com/Python-World/python-mini-projects
https://github.com/practical-tutorials/project-based-learning
https://github.com/bradtraversy/50projects50days
flutter
https://youtu.be/RevQv_v_Fhc
https://github.com/toeverything/AFFiNE
https://p101s2.github.io/
Fastai
https://github.com/Friedrich94326/AI_and_Data_Science/tree/Python/Python/Projects
https://github.com/hkbus
https://g0vhk-io.github.io/HKAddressParser/#/

Must read books
https://hands1ml.apachecn.org/#/ # Sklearn 与 TensorFlow 机器学习实用指南第二版
https://pyda.apachecn.org/#/ # 利用 Python 进行数据分析 · 第 2 版
machine learning for trading
machine learning for algorithmic trading
https://github.com/ceobillionaire/WHAT-AI-CAN-DO-FOR-YOU
深入理解計算機系統
Unit Testing, Principles, Practices, and Patterns
Essential Math for AI
https://ywh1bkansf.feishu.cn/wiki/QPe5w5g7UisbEkkow8XcDmOpn8e
线性代数可视化手册
https://towardsdatascience.com/130-ml-tricks-and-resources-curated-carefully-from-3-years-plus-free-ebook-7832ca4a37ef

Must learn courses
史丹福 cs230
https://www.newmobilelife.com/2023/06/08/google-11-free-ai-courses/
https://coding-interview.kalan.dev/
https://github.com/jwasham/coding-interview-university
https://microsoft.github.io/AI-For-Beginners/
https://github.com/microsoft/AI-For-Beginners
https://github.com/google-research/tuning_playbook
Google Generative AI learning
https://www.cloudskillsboost.google/journeys
Microsoft Artificial Intelligence for Beginners
Lightning AI Deep Learning Fundamentals
MIT introtodeeplearning dot com
UC Berkeley Designing, Visualizing and Understanding Deep Neural Networks
Cornell Tech CS Introduction to Data Science
Learn Prompting：learnpromptingdotorg
Elements of AI：elementsofaidotcom
IBM Courseradotorg IBM Applied AI
atcold.githubdotio/pytorch-Deep-Learning/
https://github.com/mtdvio/every-programmer-should-know
Deep learning in time series analysis
Machine learning for algorithmic trading
https://github.com/CyC2018/CS-Notes
https://axk51013.medium.com/%E9%80%B2%E9%9A%8Edata-science%E6%8A%80%E5%B7%A7%E5%A4%A7%E5%85%A8-%E7%9B%AE%E9%8C%84-9f39ef7b04a3

codespace and docker
github python/flask codespace
https://juejin.cn/post/7102620860720087053
https://juejin.cn/post/7259372449833828409

Chart animation
https://github.com/dexplo/bar_chart_race
https://www.dunderdata.com/blog/create-a-bar-chart-race-animation-in-python-with-matplotlib
https://igoamazing.com/python-plotly/
https://github.com/JackMcKew/pandas_alive
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247500033&idx=1&sn=79acaead7ea5106b9280ee7d65efc97a&chksm=fdc8f627cabf7f31e5aed380b11c535e3e54860e3800e341bb64099ad08828d3c16a859ced0a&scene=21#wechat_redirect
https://github.com/imageio/imageio
https://www.linkedin.com/feed/update/urn:li:activity:7032712854961045504/?utm_source=share&utm_medium=member_android

Data visualization
https://zhuanlan.zhihu.com/p/148748125?utm_id=0
Matplotlib
https://zhuanlan.zhihu.com/p/388287863
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247488470&idx=1&sn=d54ae505d004e61a1de7d53fba67207a&chksm=fdcb24f0cabcade6e85db9065fc835be4bdf3fd98643b05072d1ad608972f472cc581cb2b342&scene=21#wechat_redirect
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247501498&idx=1&sn=626c5506b3df40d7d1aed491ae381129&chksm=fdc8f19ccabf788a435ebda1946d7dc3d8fdccb394b7a4c3efa61e0cc04deabf74c252b4cba7&scene=21#wechat_redirect
Seaborn
https://zhuanlan.zhihu.com/p/395103497
https://blog.51cto.com/u_13389043/3155923
pyecharts
https://zhuanlan.zhihu.com/p/446927854
https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/RZ0d9FWDJDPH2IqrIsThMw
https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/FjNzAxkioePPG1a6vR0jTQ
plotly
https://zhuanlan.zhihu.com/p/387268377
mapbox
https://www.educative.io/collection/page/10370001/5993792801079296/5430842847657984/project
R language
https://mp.weixin.qq.com/s?__biz=MzkzMDE4NTc5NA==&mid=2247494348&idx=1&sn=d57f4ada61f32fd7d125a8e8d56188ae&chksm=c27cbde1f50b34f73615468d6f218b0e7a395d9981b911635b45319848d292a87d27fe7bf309&scene=132#wechat_redirect
jupyter notebook only
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247491053&idx=1&sn=308114cc5de8b0ac4ee6f2d6e5ae13dd&chksm=fdcb2acbcabca3dd0c1559b37b4060b602a3a6f46a042541fcf553b40bf9959be8e1ea2b0762&scene=21#wechat_redirect
PyG2Plot
https://zhuanlan.zhihu.com/p/413293073
python-graph gallery
dashboards
https://thinkinfi.com/make-interactive-dashboard-using-dash-with-python/
https://github.com/3b1b/manim
https://flowingdata.com/2023/02/27/100-visualizations-from-a-single-dataset-with-6-data-points/
https://flowingdata.com/2023/05/02/one-day-chart-challenge/
https://simons.berkeley.edu/news/using-theory-design-better-interactions-visualized-data
Folium
http://liyangbit.com/pythonvisualization/Plotly-Express-introduction-cn/
https://github.com/Friedrich94326/AI_and_Data_Science/blob/Python/Python/Data_Visualisation_with_Matplotlib/Different_Plot_Types.py
https://github.com/Friedrich94326/AI_and_Data_Science/blob/Python/Python/Data_Visualisation_with_Matplotlib/Line_Graphs_Matplotlib.py

dashboard
python dashboard
Stock dashboard
Market dashboard
数据可视化模板
https://learnpython.com/blog/first-python-dashboard/
https://zhuanlan.zhihu.com/p/429709268?utm_id=0
https://www.youtube.com/watch?v=t3cAUt7sOQg
https://youtu.be/0Smgm2UTUSo
https://youtu.be/Lfzu74XDyco
https://medium.com/%E6%95%B8%E6%93%9A%E5%88%86%E6%9E%90%E4%B8%8D%E6%98%AF%E5%80%8B%E4%BA%8B/%E9%82%A3%E4%BA%9B%E7%82%AB%E9%85%B7%E9%AB%98%E7%AB%AF%E7%9A%84%E8%A6%96%E8%A6%BA%E5%8C%96%E5%84%80%E8%A1%A8%E6%9D%BF-%E6%98%AF%E5%A6%82%E4%BD%95%E9%96%8B%E7%99%BC%E5%87%BA%E4%BE%86%E7%9A%84-%E6%94%BB%E7%95%A5-cc64f0d100c2

Plotly + dash
https://realpython.com/python-dash/
https://medium.com/innovation-res/how-to-build-an-app-using-dash-plotly-and-python-and-deploy-it-to-aws-5d8d2c7bd652
https://www.datacamp.com/tutorial/learn-build-dash-python
https://www.justintodata.com/python-interactive-dashboard-with-plotly-dash-tutorial/
https://towardsdatascience.com/web-development-with-python-dash-complete-tutorial-6716186e09b3
https://towardsdatascience.com/how-to-build-a-web-based-app-in-50-lines-of-code-using-plotly-and-dash-3953f039b217

python interactive without ui
https://www.pyweb.io/

time series analysis
time series wiki
https://towardsdatascience.com/advanced-visualization-techniques-for-time-series-analysis-14eeb17ec4b0
https://www.mql5.com/en/articles/12140
https://towardsdatascience.com/time-series-forecasting-deep-learning-vs-statistics-who-wins-c568389d02df
https://towardsdatascience.com/time-series-forecasting-with-facebooks-prophet-in-10-minutes-958bd1caff3f
https://jadream1159.medium.com/mtgnn-kdd2020-connecting-the-dots-multivariate-time-series-forecasting-with-graph-neural-a66459f3af4a
https://www.sarem-seitz.com/winning-with-simple-not-even-linear-time-series-models/
https://huggingface.co/blog/autoformer
https://www.zhihu.com/question/405169480/answer/2257390187
https://zhuanlan.zhihu.com/p/444365030
https://zhuanlan.zhihu.com/p/101126791
https://zhuanlan.zhihu.com/p/51541755
https://zhuanlan.zhihu.com/p/45736442
https://zhuanlan.zhihu.com/p/137319451
https://zhuanlan.zhihu.com/p/49200739
https://zhuanlan.zhihu.com/p/85108128
https://zhuanlan.zhihu.com/p/463629715
https://zhuanlan.zhihu.com/p/441451881
https://zhuanlan.zhihu.com/p/424195019
TSMixer
https://towardsdatascience.com/deepar-mastering-time-series-forecasting-with-deep-learning-bc717771ce85

time series database
InfluxDB 3.0
https://thenewstack.io/predictive-analytics-using-a-time-series-database/
https://iter01.com/559859.html

financial analysis
quantitative finance python
https://github.com/harryworlds/FinancialAnalysisMachineLearningAlgortihmsByHemantThapa
https://github.com/sayeemukund/Stock-Market-Prediction
https://share.streamlit.io/-/auth/app?redirect_uri=https%3A%2F%2Fsayeemukund-stock-market-predict-stock-market-prediction-6ti1m4.streamlit.app%2F
financial analysis python
python金融分析
fundamental analysis python
fundamental analysis of stocks using python
design a fundamental analysis that use python
design a technical analysis that use python
technical analysis python
https://jayantverma2809-stock-analysis-app-7xxxtz.streamlit.app/
finnancial and valuation analysis/modeling
strategic sophistication and trading profits
financial dashboard
quantconnect
https://youtu.be/joXDV5eqOoY
backtrader
zipline
https://pyecontech.com/
https://hk.jobsdb.com/en-hk/articles/%E5%85%A5%E8%A1%8Cquant-trader/
https://www.mtj-community.com/1-intraday-fundamentals-2-technical-analysis-3-reading-the-tape/
https://www.mtj-community.com/tag/%e4%ba%a4%e6%98%93%e5%9f%ba%e6%9c%ac%e8%a6%81%e7%9f%a5%e7%9a%84%e4%ba%8b/
Operational Research
quant tutorial
https://www.youtube.com/watch?v=ZSavDAaKy50
https://www.wallstreetprep.com/self-study-programs/premium-package/
stock prediction
Use library for stock backtesting
https://www.pionex.com/zh-TW/chat
https://www.incomore.com.tw/topic-13727
https://stylengineer.com/program/python-stock-stockcodelookup-guide/
https://www.finlab.tw/%E7%94%A8%E7%88%AC%E8%9F%B2%E7%88%AC%E5%85%A8%E4%B8%96%E7%95%8C%E8%82%A1%E5%83%B9/
https://www.finlab.tw/%E5%88%A9%E7%94%A8pandas%E8%BC%95%E9%AC%86%E5%8F%96%E5%BE%97%E6%AD%B7%E5%8F%B2%E8%82%A1%E5%83%B9/
https://ithelp.ithome.com.tw/m/users/20103826/ironman/3032?sc=iThelpR
https://corporatefinanceinstitute.com/resources/data-science/how-to-scrape-stock-data-with-python/
https://freewechat.com/a/MzAwMjYxNjcwMw==/2456404246/1
https://blog.51cto.com/u_15652786/5325345
https://blog.51cto.com/u_15844361/5792521
https://blog.51cto.com/phyger/5201970
https://blog.51cto.com/u_15127492/2657080
https://www.youtube.com/watch?v=Jb8l989IzTE
https://youtu.be/H2OkrvSojOI
https://youtu.be/B9rUPj7z9TA
https://www.careerprinciples.com/courses/finance-valuation-course
https://www.careerprinciples.com/courses/excel-for-business-finance
https://mytradingjournalhk.com/
https://www.linkedin.com/feed/update/urn:li:activity:7037616854219034624/
https://github.com/MilianoJunior/Advance-in-Financial-ML/blob/main/dados/Date_main.py
https://www.marketlifetrading.com/
https://www.mkassistant.com/collections/all
https://maven.com/abdullah-karasan/finance-python
1. yfinance: A popular library that provides a simple way to access financial data from Yahoo Finance. It offers real-time and historical stock price data, as well as options and dividends data, which can be used for a range of analysis and research.
2. Quantstats: A wonderful library to analyze stocks and portfolios. It offers a suite of statistical and risk metrics, allowing users to compare their portfolios to a benchmark, as well as functions for backtesting and simulating returns.
3. TA-Lib: A widely-used technical analysis library. It offers a wide range of technical indicators, such as moving averages, relative strength index (RSI), Bollinger Bands, ATR, and many others that can be used to analyze market trends and find buying and selling opportunities.
4. PyPortfolioOpt: A great library for portfolio optimization that offers a range of asset allocation techniques, such as the mean-variance optimization model and the Black-Litterman allocation model.
https://medium.datadriveninvestor.com/predicting-the-stock-market-with-python-bba3cf4c56ef
https://www.finlab.tw/%E7%94%A8%E7%88%AC%E8%9F%B2%E7%88%AC%E5%85%A8%E4%B8%96%E7%95%8C%E8%82%A1%E5%83%B9/
https://medium.com/@willbillionquant/%E8%B8%8F%E7%A0%B4%E9%90%B5%E9%9E%8B%E7%84%A1%E8%A6%93%E8%99%95-%E6%95%B8%E6%93%9A-3ec4e56fb452
https://zhuanlan.zhihu.com/p/124240024
https://zhuanlan.zhihu.com/p/25141964
https://zhuanlan.zhihu.com/p/136358735
https://medium.com/%E8%B3%87%E6%96%99%E9%9A%A8%E7%AD%86/python101-%E5%BB%A3%E6%9D%B1%E8%A9%B1python%E5%85%A5%E9%96%80-%E4%B8%80-294d9554078a
https://rapidapi.com/blog/google-finance-api-alternatives/
https://github.com/datacamp/datacamp-community-tutorials/blob/master/Python%20Finance%20Tutorial%20For%20Beginners/Python%20For%20Finance%20Beginners%20Tutorial.ipynb
https://handsoffinvesting.com/get-40-technical-indicators-for-a-stock-using-python/
https://pypi.org/project/get-all-tickers/
python trading 教學
https://github.com/gregwinther/Python-in-Finance-and-Economics
https://www.codementor.io/blog/quantitative-trading-6i4dw8wj4z
https://link.springer.com/book/10.1007/978-3-030-29141-9
https://www.learndatasci.com/tutorials/python-finance-part-2-intro-quantitative-trading-strategies/
https://www.coursera.org/specializations/finance-quantitative-modeling-analysts
https://www.bitdegree.org/tutorials/python-for-finance/
https://maven.com/fpaprep/fpa-bootcamp
https://www.datacamp.com/tracks/finance-fundamentals-in-python
https://blog.csdn.net/csdn_sweetcoder/article/details/109089634
https://www.udacity.com/course/ai-for-trading--nd880
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9680880/
https://chenhh.gitbooks.io/multiperiod_portfolio_optimization/content/
https://github.com/mirca/riskparity.py
https://smartlever.medium.com/i-no-longer-program-i-build-chatgpt-bing-chat-trading-platform-83e8bf3f8037
https://github.com/SmartLever/SmartBots
https://3commas.io/blog/maximize-grid-bot-performance-automatic-backtesting
butterfly spread
reverse iron butterfly
https://github.com/waditu/tushare
dcf forecasting
revenue forecasting
https://redis.io/
Market Wizards
https://github.com/google/tf-quant-finance
https://zhuanlan.zhihu.com/p/456528701

Data Science
The tutorial will cover the following topics:
Data processing and analysis, including data cleaning, applying data science techniques, data extraction and manipulation.
Using Python for data visualization. Commonly used packages such as Matplotlib, Seaborn, bokeh will be used to create charts, while industry-standard Tableau will be used to create interactive data visualizations.
Managing large datasets, including relational and non-relational databases, and using SQL to query data.
Gain in-depth understanding of analyzing financial data, particularly cryptocurrency, through practical scenarios and tool usage. Additionally, learn how to incorporate other data for correlation analysis, such as foreign exchange, futures, and real estate.
Development and management practices, such as how to write clean code, use Git version control, deploy environments conveniently, collaborate effectively, and what agile development management is. The roles and responsibilities of engineers, PMs, and designers in collaborative work and communication will also be introduced.
Quantitative Trading
The purpose of quantitative trading is to allow everyone to develop their own quantitative strategies and build their own Live Trading system without the risk of key leakage from third-party platforms.
The tutorial will cover the following topics:
Teach the basics of quantitative trading.
What are the traditional quantitative trading methods and backtesting methods? How to accelerate backtesting in practice?
Can quantitative trading be done using pattern instead of traditional indicators? How to do it?
How to let the program help you find support and resistance? What are the various methods for this and their significance?
Understand correlation calculation to enhance asset risk management capabilities. In addition, various algorithms and their meanings for correlation calculations will be taught.
How to conduct risk assessment and asset allocation?
How to execute exchange connections? How to deploy the platform?
How to use AI for quantitative trading? What are machine learning and deep learning? What models can be used for quantitative trading? What are the variations of these models?
How to connect Telegram bots to report orders or automatically report trading status?
https://mattschapman.github.io/

Reinforcement learning
https://www.marktechpost.com/2023/05/04/dream-first-learn-later-deckard-is-an-ai-approach-that-uses-llms-for-training-reinforcement-learning-rl-agents/
https://voyager.minedojo.org/
RL algorithms can be categorized as either model-based or model-free, and as either value-based or policy-based.
https://en.wikipedia.org/wiki/Multi-objective_optimization
https://blog.csdn.net/abcdefg90876/article/details/108459475
https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html
https://simoninithomas.github.io/deep-rl-course/
http://people.eecs.berkeley.edu/~pabbeel/nips-tutorial-policy-optimization-Schulman-Abbeel.pdf
finrl
gym
https://github.com/Farama-Foundation/Gymnasium
https://github.com/openai/safety-gym
https://github.com/deepmind/dm_control
https://google.github.io/dopamine/
stable baselines 3
cleanRL
OpenAI Gym, RLlib, Stable Baselines, Dopamine, keras-rl
tensortrade
https://github.com/SparkShen02/MDP-with-Value-Iteration-and-Policy-Iteration
https://github.com/carpedm20/deep-rl-tensorflow
Libraries
The OpenAI Gym and Safety Gym frameworks provide code to build the environments that the agents are trained in. The researchers from DeepMind provide the Control Suite package, which is used for physics-based RL simulation.
Algorithm
The Stable Baselines 3 library is implemented in PyTorch and provides the tool to compare algorithms and create new ones, too. Similarly, the ACME library provides RL agents and building blocks and is flexible enough to do your own research. As the third alternative, one can consider Google’s Dopamine framework, which focuses on fast prototyping for speculative research. It supports JAX and TensorFlow.
https://github.com/deepmind/pycolab !!!!!!!!!!!!!!!!!!!!!!!
https://github.com/Farama-Foundation/MAgent2 !!!!!!!!!!!!!!!!!!!!!!!
https://github.com/Farama-Foundation/Minigrid !!!!!!!!!!!!!!!!!!!!!!!
https://github.com/Farama-Foundation/MiniWorld
https://github.com/Farama-Foundation/MicroRTS-Py !!!!!!!!!!!!!!!!!!!!!!!
https://github.com/Farama-Foundation/MicroRTS
https://github.com/awilliea/Risk-based_RL_for_Optimal_Trading_Execution stock
https://github.com/s-diaco/DRL4Trading stock
https://github.com/kochlisGit/TraderNet-CRv2 stock
https://github.com/THINK989/Real-Time-Stock-Market-Prediction-using-Ensemble-DL-and-Rainbow-DQN stock
https://github.com/rll/rllab
https://github.com/RPC2/DRL_paper_summary/tree/master
https://github.com/deepmind/acme
https://github.com/deepmind/envlogger
https://github.com/deepmind/dm_control
https://github.com/deepmind/pysc2
https://github.com/openai/retro
https://github.com/unixpickle/muniverse
https://github.com/unixpickle/demoverse
https://towardsdatascience.com/hyperbolic-deep-reinforcement-learning-b2de787cf2f7
https://github.com/deepmind/alphadev
https://www.marktechpost.com/2023/06/12/superhuman-performance-on-the-atari-100k-benchmark-the-power-of-bbf-a-new-value-based-rl-agent-from-google-deepmind-mila-and-universite-de-montreal/
https://arxiv.org/abs/2206.08332
https://github.com/deepmind/deepmind-research/blob/master/byol/byol_experiment.py
https://danijar.com/project/dreamer/
https://github.com/opendilab/awesome-exploration-rl
https://www.uber.com/en-HK/blog/deep-neuroevolution/
https://techxplore.com/news/2023-09-learning-based-method-coverage-path-recharging.html
https://sites.google.com/view/meta-reward-net
https://jmlr.org/papers/volume18/16-634/16-634.pdf
https://github.com/PWhiddy/PokemonRedExperiments
https://spinningup.openai.com/en/latest/
https://spinningup.openai.com/en/latest/spinningup/keypapers.html
https://github.com/openai/spinningup

From this list, we can identify common properties that make learning easier. None of the properties below are required for learning, but satisfying more of them is definitively better.

It is easy to generate near unbounded amounts of experience. It should be clear why this helps. The more data you have, the easier the learning problem is. This applies to Atari, Go, Chess, Shogi, and the simulated environments for the parkour bot. It likely applies to the power center project too, because in prior work (Gao, 2014), it was shown that neural nets can predict energy efficiency with high accuracy. That’s exactly the kind of simulated model you’d want for training an RL system. It might apply to the Dota 2 and SSBM work, but it depends on the throughput of how quickly the games can be run, and how many machines were available to run them.

The problem is simplified into an easier form. One of the common errors I’ve seen in deep RL is to dream too big. Reinforcement learning can do anything! That doesn’t mean you have to do everything at once. The OpenAI Dota 2 bot only played the early game, only played Shadow Fiend against Shadow Fiend in a 1v1 laning setting, used hardcoded item builds, and presumably called the Dota 2 API to avoid having to solve perception. The SSBM bot acheived superhuman performance, but it was only in 1v1 games, with Captain Falcon only, on Battlefield only, in an infinite time match. This isn’t a dig at either bot. Why work on a hard problem when you don’t even know the easier one is solvable? The broad trend of all research is to demonstrate the smallest proof-of-concept first and generalize it later. OpenAI is extending their Dota 2 work, and there’s ongoing work to extend the SSBM bot to other characters.

There is a way to introduce self-play into learning. This is a component of AlphaGo, AlphaZero, the Dota 2 Shadow Fiend bot, and the SSBM Falcon bot. I should note that by self-play, I mean exactly the setting where the game is competitive, and both players can be controlled by the same agent. So far, that setting seems to have the most stable and well-performing behavior.

There’s a clean way to define a learnable, ungameable reward. Two player games have this: +1 for a win, -1 for a loss. The original neural architecture search paper from Zoph et al, ICLR 2017 had this: validation accuracy of the trained model. Any time you introduce reward shaping, you introduce a chance for learning a non-optimal policy that optimizes the wrong objective. If you’re interested in further reading on what makes a good reward, a good search term is “proper scoring rule”. See this Terrence Tao blog post for an approachable example.

As for learnability, I have no advice besides trying it out to see if it works.

If the reward has to be shaped, it should at least be rich. In Dota 2, reward can come from last hits (triggers after every monster kill by either player), and health (triggers after every attack or skill that hits a target.) These reward signals come quick and often. For the SSBM bot, reward can be given for damage dealt and taken, which gives signal for every attack that successfully lands. The shorter the delay between action and consequence, the faster the feedback loop gets closed, and the easier it is for reinforcement learning to figure out a path to high reward.

Multiagent Reinforcement Learning
https://pettingzoo.farama.org/
https://arxiv.org/abs/1711.02301
https://arxiv.org/abs/1711.00832
https://arxiv.org/abs/1511.06342
https://github.com/deepmind/meltingpot
https://arxiv.org/abs/2308.03526
https://github.com/deepmind/mujoco
https://github.com/ill-inc/biomes-game
https://www.biomes.gg/

Multiagent Reinforcement Learning (MARL) is a subfield of artificial intelligence and reinforcement learning that focuses on scenarios where multiple agents interact within a shared environment. In this setting, each agent aims to make decisions that maximize their cumulative rewards, while taking into account the actions and strategies of other agents.

Key concepts and challenges in MARL include:

1. *Agent Types and Multiagent Environment:* There are various types of agents operating in a shared environment. These agents can be cooperative (working together to achieve a common goal), competitive (competing for limited resources), or a mixture of both.

2. *Partial Observability:* Agents often have limited or partial observations of the environment. This incomplete information can make decision-making more challenging as agents must infer hidden states or predict the actions of others.

3. *Non-Stationarity:* Due to the adaptive nature of agents, the environment is non-stationary. As agents learn and change their strategies, the dynamics of the environment shift, making it a moving target for each agent.

4. *Multiagent Policies:* Each agent can have its own policy that dictates its actions based on its observations. Policies can be influenced by beliefs about other agents' behaviors.

5. *Exploration vs. Exploitation:* Balancing the need to explore new strategies with the desire to exploit known successful strategies is crucial for effective learning in MARL.

6. *Learning Algorithms and Value Function Approximation:* Various algorithms, such as Q-learning, Deep Q-Networks (DQN), Proximal Policy Optimization (PPO), and others, are employed in MARL. Some of these, like deep neural networks, help in approximating policies and value functions, making learning scalable.

7. *Communication:* Agents may have the ability to communicate, allowing them to coordinate actions or share information. This communication can introduce both complexity and opportunities for improved collaboration.

8. *Emergent Behavior:* Interactions in MARL can lead to emergent behaviors, where agents develop strategies that weren't explicitly programmed but arise from their interactions.

Some approaches used in MARL include:

- *Independent Q-Learning (IQL):* Each agent learns independently, treating others as part of its environment.
- *Centralized Training and Decentralized Execution:* Agents learn together in a central framework but act independently during execution.
- *Multiagent Actor-Critic (MAAC):* This merges actor-critic methods with centralized learning to develop joint policies.

Applications of MARL span a wide range of domains, such as robotics, autonomous vehicles, game playing, traffic management, and economics. As a dynamic research area, new algorithms and methodologies continue to emerge to handle the intricacies of multiagent environments.



optimization
https://github.com/srivatsankrishnan/oss-arch-gym
https://scikit-opt.github.io/
https://scikit-optimize.github.io/stable/
模型能力指標
https://zhuanlan.zhihu.com/p/392041753
https://www.jianshu.com/p/1a98901e87ad
https://github.com/wangqingbaidu/Dr.Sure/blob/master/Algorithm/%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.md
https://blog.csdn.net/weixin_41519463/article/details/100860181

monte carlo alphazero
https://web.engr.oregonstate.edu/~afern/classes/cs533/notes/mcp-trees.pdf
- When you have a tough planning problem and a simulator, try Monte-Carlo planning.
- Basic principles derive from the multi-arm bandit.
- Policy rollout and switching are great ways to exploit existing policies and make them better.
- If a good heuristic exists, then shallow sparse sampling can give good results.
- UCT is often quite effective, especially when combined with domain knowledge.
https://cmudeeprl.github.io/403_website/assets/lectures/s21/S21_lec17_MCTS_priorknowledge.pdf
- Basic mcts pseudo code
- Reduce search depth when we estimate the node value using value network
- Reduce search breath when we expand the node using action network

Software Design
https://www.youtube.com/watch?v=tAuRQs_d9F8
https://www.youtube.com/watch?v=qpOcRG3e9Q8
https://www.youtube.com/watch?v=UOkOA6W-vwc
https://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml
https://zh.wikipedia.org/zh-tw/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF
https://zh.m.wikipedia.org/zh-tw/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A
https://zh.wikipedia.org/zh-tw/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80
https://erikscode.space/index.php/category/software-design/
https://www.coursera.org/programs/coursera-for-hkust-yetdg?collectionId=3Jzsr&currentTab=CATALOG&productId=0ImdBwolEeyCoBKtfSoizQ&productType=s12n&showMiniModal=true
https://github.com/aosabook/500lines
https://github.com/HT524/500LineorLess_CN
https://github.com/rohitksingh/Design_Patterns_aka_Hawai_Baatein
http://users.encs.concordia.ca/~nikolaos/pattern_detection.html
https://www.dofactory.com/net/design-patterns
https://sourcemaking.com/design_patterns
https://www.pluralsight.com/courses/python-design-patterns-playbook
https://www.pluralsight.com/courses/patterns-library
Fundamentals of Software Architecture: An Engineering Approach
Clean Code: A Handbook of Agile Software Craftsmanship
clean architecture 實作篇
https://dev.to/dyarleniber/hexagonal-architecture-and-clean-architecture-with-examples-48oi
clean/hexagonal architecture
gang of four design patterns
solid principles in python
object oriented pipeline python
https://zh.m.wikipedia.org/zh-tw/%E5%8F%8D%E5%B0%84%E5%BC%8F%E7%BC%96%E7%A8%8B
https://github.com/kamranahmedse/design-patterns-for-humans
https://github.com/faif/python-patterns
https://github.com/kelvins/design-patterns-python
https://github.com/PacktPublishing/Mastering-Python-Design-Patterns-Second-Edition
https://github.com/RefactoringGuru/design-patterns-python
https://zh.wikipedia.org/zh-tw/%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B
https://en.wikipedia.org/wiki/Software_design_pattern
https://en.wikipedia.org/wiki/Anti-pattern
https://sunnyday0932.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/page/4/
https://sunnyday0932.github.io/2020/%E4%B8%89%E5%B1%A4%E5%BC%8F%E6%9E%B6%E6%A7%8B/
https://zh.wikipedia.org/zh-tw/GRASP_(%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E8%A8%AD%E8%A8%88)
https://zh.wikipedia.org/zh-tw/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)
https://ithelp.ithome.com.tw/articles/10080473
https://zh.m.wikipedia.org/zh-tw/%E8%BD%AC%E5%8F%91_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)
https://ithelp.ithome.com.tw/users/20112528/ironman/2113
http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod
軟體工程筆記
https://developer-advocacy.com/
cross-cutting concern
https://notfalse.net/tag/%e4%be%9d%e8%b3%b4%e5%80%92%e7%bd%ae%e5%8e%9f%e5%89%87
https://zh.wikipedia.org/zh-tw/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5
https://zh.wikipedia.org/zh-tw/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99
Fundamental Concepts in Programming Languages
http://c2.com/ppr/
http://c2.com/doc/oopsla87.html
https://ithelp.ithome.com.tw/articles/10079701
https://ithelp.ithome.com.tw/articles/10080201
https://ithelp.ithome.com.tw/users/20107637/ironman/1927
http://teddy-chen-tw.blogspot.com/2011/12/1.html
Head First Design Patterns
https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013
https://www.youtube.com/watch?v=tv-_1er1mWI&ab_channel=Fireship
https://www.arjancodes.com/mindset
https://www.udemy.com/course/object-oriented-programming-with-python-learn-to-code-faster/
https://www.coursera.org/specializations/software-engineering
https://www.coursera.org/specializations/software-design-architecture
https://www.coursera.org/specializations/software-development-lifecycle
https://www.coursera.org/specializations/object-oriented-programming
https://www.coursera.org/specializations/java-object-oriented
https://python.plainenglish.io/7-levels-of-creating-python-classes-fc440dc96a19
https://zhuanlan.zhihu.com/p/76618283?utm_id=0
youtube.com/watch?v=i53Gi_K3o7I&list=WL&index=83
https://www.youtube.com/watch?v=JubdZIdLQ4M&list=WL&index=94&pp=gAQBiAQB
https://www.youtube.com/watch?v=cVVMbuKmNes&list=WL&index=95&pp=gAQBiAQB
https://www.youtube.com/watch?v=lsddiYwWaOQ&list=WL&index=96&pp=gAQBiAQB
https://www.youtube.com/watch?v=g0XmFpmvsDk&list=WL&index=97&t=1s&pp=gAQBiAQB
https://www.youtube.com/watch?v=m8Icp_Cid5o&list=WL&index=106&pp=gAQBiAQB
https://dev.to/javinpaul/my-favorite-free-courses-to-learn-design-patterns-in-depth-5dp5
https://www.milanjovanovic.tech/blog/visualize-your-software-architecture-with-the-c4-model
http://modernescpp.com/index.php/category/patterns
https://zh.wikipedia.org/zh-hk/%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90
https://github.com/zky001/fluent-python-translate
Aspect-oriented programming
資料驅動編程
Event-driven programming
https://zh.wikipedia.org/zh-tw/%E6%BC%94%E5%91%98%E6%A8%A1%E5%9E%8B
https://dev.to/paulasjes/series/19794
https://juejin.cn/post/6844904083665453063
https://hackernoon.com/the-7-software-architecture-books-experienced-developers-need-to-read
https://levelup.gitconnected.com/23-design-patterns-99-of-java-developers-should-learn-45573e076b69
https://learning.oreilly.com/library/view/software-engineering-for/9781098136192/
如果要在動手開發功能前就想明白有多少種 errors 需要處理，對我來說有點難。
實際 coding 時，我的 workflow
smoking mode 冒煙模式：忽略 error 先把正常流程完成，可運作。
big try-catch: 用一個 try-catch 包裹全部程式碼，防止 App 崩潰。
error handlings: 具體分析該使用 try-catch 還是 Result type。
https://www.cnblogs.com/zhanchenjin/p/16639067.html

並行編程，約束編程，資料流編程，聲明性編程，分散式的編程，函式語言程式設計，泛型編程，指令式程式設計，邏輯編程，元程式設計，物件導向程式設計，文學程式設計

這些是不同的程式設計範式或方法論。以下是對每個範式的簡單解釋：

3. 資料流編程：將計算過程描述為一個資料流圖，其中節點表示操作，邊表示數據流。資料從一個操作流向另一個操作，以完成計算任務。

4. 聲明性編程：聲明性編程強調描述問題的性質和條件，而不是指定解決問題的具體步驟。常見的聲明性編程語言包括Prolog和SQL。

5. 分散式的編程：用於設計和開發分散式系統，其中計算和資源分佈在多個計算機節點上。這需要處理分佈式通信、同步和資源共享等問題。

6. 函式語言程式設計：函式語言將計算視為一系列函式的應用。它強調無狀態和無副作用的函式，並提供強大的高階函式和遞迴特性。

7. 泛型編程：泛型編程強調編寫可重用和通用的程式碼，可以適用於不同的數據類型。它使用泛型和參數化類型，以提供通用性和抽象性。

8. 指令式程式設計：指令式程式設計是一種以指令為基礎的程式設計風格，程序按照特定的指令序列執行。常見的指令式編程語言包括C、Java和Python。

9. 邏輯編程：邏輯編程基於數理邏輯，將計算過程描述為一組規則和條件的邏輯推理。Prolog是一種常用的邏輯編程語言。

10. 元程式設計：元程式設計是指編寫可以操作或生成程式碼的程式。通過元程式設計，開發者可以在執行時動態地構建、修改和生成程式碼。

11. 物件導向程式設計：物件導向程式設計是一種以物件為中心的編程方法論，將問題分解為相互作用的對象，每個對象都有自己的狀態和行為。常見的物件導向程式設計語言包括Java、C++和Python。

12. 文學程式設計：文學程式設計強調以人類可讀的形式結合程式碼和文學元素，使程式碼更具可讀性和解釋性。它通常與Jupyter筆記本等工具和環境一起使用，以在程式碼中嵌入說明和文本。


data structure
https://www.youtube.com/playlist?list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb
https://www.youtube.com/playlist?list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp
https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c
https://www.udemy.com/course/datastructurescncpp/
https://www.coursera.org/learn/algorithms-part1
https://www.tutorialspoint.com/data_structures_algorithms/index.htm
https://www.programiz.com/dsa
https://www.geeksforgeeks.org/data-structures/
https://www.scaler.com/topics/data-structures/
https://www.udemy.com/course/data-structures-and-algorithms-the-complete-guide/
https://www.udemy.com/course/master-the-coding-interview-data-structures-algorithms/
https://www.studytonight.com/data-structures/
https://www.codechef.com/certification/data-structures-and-algorithms/prepare
https://www.journaldev.com/data-structure-algorithms
https://www.guru99.com/design-analysis-algorithms-tutorial.html
https://prepinsta.com/data-structures/
https://www.w3schools.in/data-structures/intro
https://www.javatpoint.com/data-structure-tutorial
https://www.coursera.org/specializations/data-structures-algorithms
https://www.coursera.org/specializations/algorithms
https://www.udacity.com/course/data-structures-and-algorithms-in-swift--ud1011
https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256
https://www.coursera.org/learn/python-data
https://www.udemy.com/user/mohammed-abdul-bari-2/
https://cses.fi/book/book.pdf
https://github.com/prabhupant/python-ds

Code style
https://en.wikipedia.org/wiki/Coding_best_practices
https://www.youtube.com/watch?v=Kl3_Gmn4Ujg
https://www.youtube.com/watch?v=zmWf_cHyo8s
https://google.github.io/styleguide/pyguide.html
https://www.youtube.com/watch?v=wgWwJSnhgDU
https://www.youtube.com/watch?v=8OKTAedgFYg&ab_channel=PatrickLoeber
https://github.com/Kristories/awesome-guidelines
https://github.com/trekhleb/state-of-the-art-shitcode
https://github.com/topics/code-review

code review
https://github.com/facebook/pyre-check
https://github.com/analysis-tools-dev/static-analysis


Unit test
https://www.youtube.com/watch?v=ULxMQ57engo
https://www.youtube.com/watch?v=NI5IGAim8XU
pytest vs unittest
https://myapollo.com.tw/zh-tw/7-useful-pytest-plugins/
patch

git control
https://learngitbranching.js.org/?locale=zh_TW
https://github.com/pcottle/learnGitBranching
https://github.com/k88hudson/git-flight-rules
https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
https://www.cnblogs.com/chengxy-nds/p/17306115.html

Great repo
free programming books
developer roadmap
public api
coding interview university
awesome github
freecodecamp githubs

Python
https://www.coursera.org/specializations/python
https://www.python.org/
https://realpython.com/
https://www.datacamp.com/
https://learnpython.org/
https://github.com/JustDoPython/python-100-day/tree/master/
https://github.com/Python-World
https://github.com/RichardFu123/PythonDoc
https://zhuanlan.zhihu.com/p/260175468
https://github.com/RichardFu123/HardWayLearnTyping/tree/master/Python3
https://blog.csdn.net/ityard/article/details/117757782
https://www.zhihu.com/question/300985609/answer/1225638751
https://zhuanlan.zhihu.com/p/554467866
https://zhuanlan.zhihu.com/p/409383965
https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p01_data_structures_algorithms.html
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247497696&idx=1&sn=ea99acc80156b27049682d631aad3ff6&chksm=fdc8c0c6cabf49d093daa9e0ff60351389ccf9c8f3c56bdcb14cb7aa29d7c3523826a13ae871&scene=21#wechat_redirect
https://zhuanlan.zhihu.com/p/103466869
https://zhuanlan.zhihu.com/p/411708536
https://zhuanlan.zhihu.com/p/421726412
https://www.zhihu.com/question/24590883/answer/1220720307
https://zhuanlan.zhihu.com/p/87891142
https://zhuanlan.zhihu.com/p/87894542
https://automatetheboringstuff.com/2e/
https://medium.com/techtofreedom/11-python-tricks-to-show-off-your-advanced-skills-4ea2d53a9f7c
https://python.plainenglish.io/mastering-python-the-10-most-difficult-concepts-and-how-to-learn-them-3973dd15ced4
https://github.com/lukepolson/youtube_channel/tree/main/Python%20Tutorial%20Series
https://github.com/lukepolson/pydata-book
https://github.com/lukepolson/Python-Self-Learning
https://www.runoob.com/python3/python3-mysql.html
https://www.tw511.com/3/39/1388.html
https://www.udemy.com/course/the-python-programming-v39-comprehensive-bootcamp/
https://www.udemy.com/course/the-intermediate-python-training-boost-your-python-skills/
https://www.coursera.org/specializations/python
https://python.plainenglish.io/10-surprising-ways-to-use-python-dictionaries-5bbce1ba4d26
https://www.humblebundle.com/software/complete-python-programming-mega-bundle-zenva-software
https://youtu.be/udP4cD2JAFM
https://medium.com/techtofreedom/10-remarkable-python-oop-tips-that-will-optimize-your-code-significantly-a47e4103b44d
https://learnku.com/python
https://www.udacity.com/course/intro-to-programming-nanodegree--nd000
https://towardsdatascience.com/combining-traditional-thread-based-code-and-asyncio-in-python-dc162084756c
Comprehensive Guide to Concurrency and Parallelism in Python
https://github.com/walter201230/Python
https://www.tenlong.com.tw/products/9786267383223

c++
“The Most Important C++ Books...Ever”
The C++ Programming Language by Bjarne Stroustrup
Effective C++ by Scott Meyers
Design Patterns by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides
International Standard for C++
Modern C++ Design by Andrei Alexandrescu
“The Most Important C++ Non-Book Publications...Ever”
Programming in C++, Rules and Recommendations by Mats Henricson and Erik Nyquist
“Exception Handling: A False Sense of Security” by Tom Cargill
“Curiously Recurring Template Patterns,” by Jim Coplien
“Using C++ Template Metaprograms” by Todd Veldhuizen
“Exception-Safety in Generic Components” by David Abrahams
“The Most Important C++ Software...Ever”
Cfront by AT&T Bell Telephone Laboratories
GCC by the GNU Project
Visual C++ by Microsoft
The Standard Template Library, originally by HP
The Libraries at Boost
https://www.udacity.com/course/c-plus-plus-nanodegree--nd213
Engineering a Sort Function, J. L. Bentley & M.D. McIlroy
SOFTWARE—PRACTICE AND EXPERIENCE, VOL. 23(11), 1249–1265 (NOV 1993)

All language
https://github.com/8483/notes
https://drive.google.com/file/d/1uBuPRFSjCywLmerNK843XUMODyM5p5Ap/view
https://techbeamers.com/
https://www.codecademy.com/
https://www.coursera.org/
https://www.khanacademy.org/computing
https://www.geeksforgeeks.org/
https://github.com/sindresorhus/awesome
https://www.lanqiao.cn/courses/?tag=%E5%85%A8%E9%83%A8&category=%E5%85%A8%E9%83%A8&fee=all&sort=default&level=all&from_login_page=true
https://github.com/TheAlgorithms
https://github.com/practical-tutorials/project-based-learning
https://github.com/bregman-arie/devops-exercises
https://github.com/mtdvio/every-programmer-should-know
https://github.com/kamranahmedse/developer-roadmap

Youtube video
https://www.youtube.com/user/Computerphile
https://www.youtube.com/@Senegoddess/videos
https://www.youtube.com/@TheCherno/videos
https://www.youtube.com/@aarthificial/videos


Python game
design phrase - game psychology
artwork phrase - game sprite sheet
programming phrase - game engine
polish phrase - game testing and fleshing out
https://replit.com/@LMNtal/Star-Wars-A-New-Recruit#AGM/Templates/Actions/reactive_combat_action.py - using https://github.com/ljmanso/AGM
https://replit.com/@HyperHacker/Alchemy?v=1
https://replit.com/@HyperHacker/Chess?v=1#main.py
https://replit.com/@MonsusBattlebus/Five-Nights-At-Freddys-Python-Edition
https://www.youtube.com/watch?v=rPJfadFSCyQ&list=PLEMXAbCVnmY6v0eFYcyiH7twEh1UF2Lxw
https://github.blog/2022-05-05-ludum-dare-50/
https://github.blog/2023-01-13-game-off-2022-winners/
https://github.com/jeremycryan/LD50
https://www.youtube.com/watch?v=cBj8PAQErA4
https://www.youtube.com/watch?v=rk9vEnjvi54&list=WL&index=5&pp=gAQBiAQB
https://www.youtube.com/watch?v=zX2o7BGjQRI&list=WL&index=113&pp=gAQBiAQB
https://www.youtube.com/watch?v=I0JXFHc7tco&list=WL&index=128&t=6s&pp=gAQBiAQB
https://github.com/rwv/chinese-dos-games
https://github.com/kitao/pyxel
https://www.youtube.com/watch?v=Zc9VBoLekRU
https://www.youtube.com/watch?v=v2gb3E0YQmQ
https://www.youtube.com/watch?v=2JCG4fCmeHk
https://www.youtube.com/watch?v=sVVn1C3F87A
https://www.raylib.com/
https://www.youtube.com/watch?v=RAkxRyXjv1M
https://www.youtube.com/watch?v=j35nmJEMhpg
https://www.youtube.com/@Goodgis/videos
https://youtu.be/QGKBeBFOM90
https://www.youtube.com/watch?v=NnI_1DOYt2A
https://www.youtube.com/watch?v=fjjmGzCeGlI
https://www.youtube.com/watch?v=3LG4zlCfnmw
https://www.youtube.com/watch?v=cj16wK4CGy8
https://www.youtube.com/watch?v=jJw7kYHp-yc
https://www.youtube.com/watch?v=6BrZryMz-ac
https://www.youtube.com/watch?v=ltF0KuotA30
https://www.youtube.com/watch?v=WnnaI_OXeEA
https://www.youtube.com/watch?v=2-CQtwX-x4Y
https://www.youtube.com/watch?v=jLLAtxPNaC0
https://www.upgrad.com/blog/6-components-of-video-game-design/
How many components are there in game design?
https://www.youtube.com/watch?v=h1o5UzKfZcQ
https://game.udn.com/game/story/122090/7208105
https://game.udn.com/game/story/122089/7205931
多智慧體博弈
https://en.wikipedia.org/wiki/Game_Developer_(website)
https://en.m.wikipedia.org/wiki/Crowd_simulation
https://link.springer.com/referenceworkentry/10.1007/978-3-319-08234-9_69-1
https://www.gamedeveloper.com/design/game-ai-the-state-of-the-industry
https://www.taylorfrancis.com/books/mono/10.1201/9781351053303/ai-games-third-edition-ian-millington
https://en.m.wikipedia.org/wiki/Pathfinding
軍事戰略
博弈論
群動
https://www.discount-courses.com/courses/unreal-engine-5-fundamentals
https://www.charlieintel.com/games/best-combos-in-game-dev-tycoon-212706/

Godot
https://github.com/godotengine/godot-vscode-plugin
https://stackoverflow.com/questions/72820929/godot-wont-open-vscode-editor
https://www.showwcase.com/show/34429/effortless-scripting-in-godot-4-with-visual-studio-code-a-step-by-step-guide
https://github.com/RedMser/godot-embed-external-editor
https://www.youtube.com/watch?v=DQFmF3u-7L8
https://www.youtube.com/watch?v=yQZKXdwyh-Q
https://www.youtube.com/watch?v=nIofPW2Z6N8
https://www.youtube.com/watch?v=HnxvYXyFpa8&list=PL0qDutCc8IQgtUXLQB07H4miK6DPvtjTg
https://www.youtube.com/watch?v=UAS_pUTFA7o&list=WL&index=1&pp=gAQBiAQB
https://www.youtube.com/watch?v=eU-F-xuEo7s&list=WL&index=36&pp=gAQBiAQB
https://www.youtube.com/watch?v=BRGe8qttPxQ&list=WL&index=41&pp=gAQBiAQB
https://www.youtube.com/watch?v=AXVGFrgz1Yw
https://youtu.be/BUA0X9l-UI4
https://www.youtube.com/watch?v=WEt2JHEe-do
https://www.youtube.com/watch?v=H-LoESVEmOE
https://www.youtube.com/watch?v=KSlGkqpICqg
https://www.youtube.com/watch?v=YBgCUQVDRkw
https://academy.zenva.com/search/?s=godot+
https://academy.zenva.com/product/godot-game-development-mini-degree/
https://www.udemy.com/courses/search/?src=ukw&q=godot+4
https://docs.godotengine.org/en/stable/getting_started/first_2d_game/index.html
https://kidscancode.org/godot_recipes/4.x/
https://quiver.dev/tutorials/
https://quiver.dev/tutorials/create-your-first-godot-4-game/
https://www.appsflyer.com/blog/mobile-marketing/hyper-casual-games/
https://www.youtube.com/watch?v=DuyAHbznRx0
https://www.youtube.com/watch?v=iBRSn63huJ8
https://www.youtube.com/watch?v=_EeVDI-PVRw
https://www.youtube.com/watch?v=rCu8vQrdDDI
https://www.youtube.com/watch?v=DuyAHbznRx0
https://youtu.be/IE6J0LQ8PFE
https://www.youtube.com/watch?v=oS4mT_4aQMM

unity
https://www.youtube.com/watch?v=AmGSEH7QcDg

Pygame
https://www.youtube.com/watch?v=6gLeplbqtqg&list=WL&index=74
https://github.com/techwithtim/Python-Platformer/blob/main/tutorial.py
https://opensource.com/article/17/12/game-framework-python
https://opensource.com/article/17/12/game-python-add-a-player
https://www.epubit.com/articleDetails?id=NC7E3EF941B50000116101A401B63E380 four in row
https://github.com/Gooodgis/dont-touch-my-presents 3 day project
https://replit.com/@ChompingDragon/Super-Mario-Bros-for-ReplitREAD-ALL-INSTRUCTIONS#main.py
https://replit.com/@LukeBlake/Tank-game
https://replit.com/@Carson-Sernick/carsoncraft
https://replit.com/@ChompingDragon/Super-Smash-Bros-for-Replit-part-2-READ-ALL-INSTRUCTIONS
https://python-course.eu/applications-python/snake-in-python.php
https://github.com/techwithtim/Pygame-Tutorials
https://github.com/techwithtim/PygameForBeginners
https://github.com/techwithtim/PyMunk-Physics-Simulation
https://www.youtube.com/watch?v=0qYu66olR64&ab_channel=ScreWiew
https://github.com/PaulleDemon/
https://github.com/PaulleDemon/TankGame
https://www.youtube.com/watch?v=rvLfF9hciU8
https://github.com/FergusGriggs/fegaria-remastered
https://github.com/NickWayne/NLC-2015
https://www.youtube.com/watch?v=QU1pPzEGrqw
pyglet
https://www.youtube.com/watch?v=KbiRYkoBV34&ab_channel=DreamsofCode
https://www.youtube.com/watch?v=61eX0bFAsYs

neat
https://github.com/AMMIROSOH/RacingCar
https://github.com/CodeReclaimers/neat-python/tree/master/examples/single-pole-balancing
https://github.com/techwithtim/NEAT-Flappy-Bird
https://github.com/monokim/framework_tutorial
https://neat-python.readthedocs.io/en/latest/
https://github.com/monokim/PyHuman

tkinter game
https://zhuanlan.zhihu.com/p/45870821

java game
https://github.com/TheCherno/Genesis/tree/master/src/com/thecherno/ld24 - changing to c++ youtube
https://www.youtube.com/watch?v=buKQjkad2I0

c++ game
https://www.youtube.com/watch?v=kc4AhROG05g
https://replit.com/@MuhammadHariz/Seamulator-V33-Game#main.cpp
https://thatonegamedev.com/cpp/c-packages-for-a-custom-game-engine/
https://opensource.com/article/22/11/extend-c-python
https://www.youtube.com/watch?v=_yyKYl1LAHM&list=WL&index=69&ab_channel=Barji
https://www.youtube.com/watch?v=iEn0ozP-jxc&list=WL&index=67&ab_channel=PolyMars
https://github.com/gregwinther/Obscura/tree/master/src
https://youtu.be/Lq2vRXMWCis
https://github.com/mgerdes/Open-Golf
https://www.youtube.com/watch?v=vtqCWvmnGTs

web game
https://replit.com/@IroncladDev/P5Platformer
https://replit.com/@phil-mac/DefCraft
https://replit.com/@Sazgr/Random-3D-Terrain-Generator
https://replit.com/@1Tim/Blocky-Platformer-Maker-simple
https://github.com/Code-Bullet/Jump-King
https://github.com/Code-Bullet/Tetris-AI-Javascript
https://github.com/Code-Bullet/NEAT-Template-JavaScript
https://github.com/Code-Bullet/Hill-Climb-Racing-AI
https://itch.io/jam/brackeys-5
https://github.com/tranchikhang/MedievalWar
https://github.com/Hextris/hextris
https://github.com/doublespeakgames/adarkroom
https://github.com/VickScarlet/lifeRestart
https://github.com/lichess-org/lila
https://github.com/GoogleChromeLabs/proxx
https://github.com/chvin/react-tetris
https://github.com/HabitRPG/habitica

Open source project
https://learnku.com/articles/23010/teach-you-to-read-the-python-open-source-project-code
https://opensource.guide/how-to-contribute/
https://doc-geonode.readthedocs.io/en/latest/005_dev_workshop/008_contribute_geonode/work_with_github.html
https://github.com/scipy/scipy/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22+
https://goodfirstissue.dev/language/python
https://github.com/matplotlib/matplotlib/issues/24404
https://groups.google.com/g/sympy/c/NewnNlFSrYc
https://github.com/sympy/sympy/wiki/GSoC-Ideas
https://youtu.be/hYLte2eoQkw
https://youtu.be/WIe-ewLxHSY
https://ossrank.com/p
https://dev.to/opensauced/choose-your-own-adventure-in-open-source-paths-to-success-167p

Command line
https://www.commands.dev/

coding website
leetcode
https://github.com/RichardFu123/LeetCode_Py
https://github.com/rip-tyang/leetcode
https://www.youtube.com/@leetcode6863
hackerrank
codewars
topcoder
coderbyte
Reply Challenges
edabit
spoj

readme
https://github.com/ashutoshpipriye/Awesome-Profile-README-templates
https://github.com/alecortega/portfolio-template
https://github.com/othneildrew/Best-README-Template
https://github.com/anuraghazra/github-readme-stats

Coding interview
https://www.explainthis.io/zh-hant/about
https://www.youtube.com/watch?v=SVvr3ZjtjI8
https://github.com/jwasham/coding-interview-university
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247497696&idx=1&sn=ea99acc80156b27049682d631aad3ff6&chksm=fdc8c0c6cabf49d093daa9e0ff60351389ccf9c8f3c56bdcb14cb7aa29d7c3523826a13ae871&scene=21#wechat_redirect
https://github.com/girishgr8/Resume-Builder
https://github.com/jwasham/coding-interview-university
https://arxiv.org/abs/2201.00650
Blind
Glassdoor

Digital marketing
https://welly.tw/digital-marketing/learn-google-lesson


blockchain project
https://www.youtube.com/watch?v=M576WGiDBdQ
https://ithelp.ithome.com.tw/users/20092025/ironman/2109
https://learnku.com/python/t/22970/build-your-own-block-chain-step-by-step-with-python
https://www.coursera.org/specializations/decentralized-finance-duke
https://www.udemy.com/course/build-your-blockchain-az/
https://www.coursera.org/specializations/blockchain-revolution-enterprise
https://www.coursera.org/specializations/blockchain
https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309
https://buildspace.so/
https://www.analyticsinsight.net/top-10-programming-languages-for-building-blockchain-applications/
https://www.blocktempo.com/how-to-create-a-new-token-via-chatgpt/
https://github.com/jamesbachini/MetaSignature
https://github.com/miaoski/ipfs-tutorial
https://github.com/ipfs/awesome-ipfs  

API
python api project
https://www.youtube.com/watch?v=0sOvCWFmrtA
https://realpython.com/tutorials/api/
https://www.mindk.com/blog/how-to-build-an-api/
https://anderfernandez.com/en/blog/how-to-create-api-python/
https://zh.m.wikipedia.org/zh-tw/%E6%B5%81%E5%BC%8F%E6%8E%A5%E5%8F%A3
https://github.com/soimort/you-get/wiki/%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E
https://github.com/hugapi/hug
https://github.com/CUNY-CL/wikipron
https://github.com/WolframResearch/WolframClientForPython
https://github.com/cuemacro/findatapy
https://github.com/markdouthwaite/minimal-flask-api
https://medium.com/quick-code/absolute-beginners-guide-to-slaying-apis-using-python-7b380dc82236
https://github.com/ml-tooling/lazydocs
https://github.com/EnZon3/TWS-dataset_gen - hosted on https://replit.com/@EnZon3/The-Worlds-Sentiment
how to design an api in python
https://blog.szymonmiks.pl/p/how-i-start-every-new-python-backend-api-project/
https://realpython.com/api-integration-in-python/
https://www.linode.com/docs/guides/create-restful-api-using-python-and-flask/
python anywhere
heroku
rapidapi
https://www.linkedin.com/feed/update/urn:li:activity:7036284497520156672?utm_source=share&utm_medium=member_android
https://youtu.be/WXsD0ZgxjRw
https://youtu.be/2JYT5f2isg4
https://youtu.be/GDa8kZLNhJ4
https://coolshell.cn/articles/18024.html
https://towardsdatascience.com/fastapi-and-streamlit-the-python-duo-you-must-know-about-72825def1243

Chatbot
eliza
https://replit.com/@HyperHacker/Chatbot
https://github.com/nat/natbot
https://github.com/jaspreetsidhu3/voice_assistant
https://www.edureka.co/blog/how-to-make-a-chatbot-in-python/#chatterbot
https://github.com/hackermondev/AllKnowledgeBob
https://github.com/f/awesome-chatgpt-prompts
https://island-stretch-3e4.notion.site/Best-Chat-GPT-Resources-b54f0284c7644583b59dd9a332f46af8
https://pyoflife.com/building-chatbots-with-python-using-natural-language-processing-and-machine-learning/
https://github.com/hwchase17/chat-your-data
https://github.com/hwchase17/langchain-streamlit-template
https://langchain.readthedocs.io/en/latest/getting_started/getting_started.html
https://github.com/gkamradt/langchain-tutorials
https://www.youtube.com/watch?v=J_0qvRt4LNk
https://www.youtube.com/watch?v=Ea9jgBjQxEs
https://github.com/togethercomputer/OpenChatKit
https://huggingface.co/spaces/togethercomputer/OpenChatKit
https://github.com/lm-sys/FastChat
https://github.com/franklindyer/discord_nlp/tree/main
https://huggingface.co/blog/rwkv
https://github.com/csunny/DB-GPT
https://github.com/imartinez/privateGPT
https://huggingface.co/tiiuae
https://www.techbang.com/posts/106676-ai-content-chatgpt-
https://github.com/aiwaves-cn/RecurrentGPT
Claude-100k
https://hazyresearch.stanford.edu/blog/2023-03-07-hyena
https://github.com/nomic-ai/gpt4all
https://github.com/ggerganov/ggml
https://github.com/xtekky/gpt4free
https://github.com/pengzhile/pandora
https://icloudnative.io/posts/completely-free-to-use-gpt4/
https://www.51cto.com/article/756751.html
https://arxiv.org/abs/2305.16334
https://til.simonwillison.net/llms/training-nanogpt-on-my-blog
MPT-7B-StoryWriter-65k+
MosaicML
MPT-30B
https://github.com/h2oai/h2ogpt#apache-v2-chatbot-with-langchain-integration
https://github.com/h2oai/h2ogpt
https://github.com/h2oai/h2o-llmstudio
https://gpt-gm.h2o.ai/
https://github.com/CarperAI/OpenELM
https://github.com/microsoft/unilm
CM3leon
https://github.com/camenduru/guanaco-colab
https://github.com/nlpxucan/WizardLM
https://github.com/jondurbin/airoboros/tree/main
https://github.com/jondurbin/airoboros/blob/main/airoboros/self_instruct.py
https://github.com/thunlp/UltraChat
https://huggingface.co/openbmb/UltraLM-13b
https://colab.research.google.com/drive/1VoYNfYDKcKRQRor98Zbf2-9VQTtGJ24k
https://huggingface.co/learn/nlp-course/chapter7/6
https://github.com/lm-sys/FastChat
https://github.com/CarperAI/trlx
https://huggingface.co/NousResearch/Nous-Hermes-13b
https://huggingface.co/TheBloke/Nous-Hermes-13B-GGML
https://huggingface.co/TheBloke/Nous-Hermes-13B-GPTQ
https://huggingface.co/weqweasdas/hh_rlhf_rm_open_llama_3b
https://github.com/OptimalScale/LMFlow
https://github.com/eric-mitchell/direct-preference-optimization

Openai API project
https://arxiv.org/pdf/2304.03442.pdf
https://reverie.herokuapp.com/arXiv_Demo/
https://www.youtube.com/watch?v=CaGqEBjsJtA
https://www.youtube.com/watch?v=MlK6SIjcjE8
https://github.com/Torantulino/Auto-GPT
https://github.com/Significant-Gravitas/Auto-GPT
https://github.com/yoheinakajima/babyagi
https://github.com/yihui-he/ActGPT
https://www.youtube.com/watch?v=2xxziIWmaSA
https://www.hk01.com/%E6%95%B8%E7%A2%BC%E7%94%9F%E6%B4%BB/889954/autogpt%E6%95%99%E5%AD%B8%E6%87%B6%E4%BA%BA%E5%8C%85-%E4%B8%8B%E8%BC%89-%E5%AE%89%E8%A3%9D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%AF%A6%E6%B8%AC-%E8%87%AA%E4%B8%BB%E5%88%86%E6%9E%90%E5%8A%9F%E8%83%BD%E6%9B%B4%E5%BC%B7%E5%A4%A7
https://github.com/reworkd/AgentGPT
https://github.com/lightaime/camel
https://colab.research.google.com/drive/1AzP33O8rnMW__7ocWJhVBXjKziJXPtim?usp=sharing
https://python.langchain.com/en/latest/use_cases/agents/camel_role_playing.html
https://arxiv.org/abs/2303.17760
https://www.camel-ai.org/
https://github.com/yoheinakajima/babyagi
https://yoheinakajima.com/task-driven-autonomous-agent-utilizing-gpt-4-pinecone-and-langchain-for-diverse-applications/
https://python.langchain.com/en/latest/use_cases/agents/baby_agi_with_agent.html
https://python.langchain.com/en/latest/use_cases/agents/baby_agi.html
https://github.com/vicuna-tools/vicuna-installation-guide
https://github.com/alaeddine-13/thinkgpt#replay-agent-memory-and-infer-new-observations
https://python.langchain.com/en/latest/modules/indexes/retrievers/examples/time_weighted_vectorstore.html
https://github.com/logspace-ai/langflow
https://www.youtube.com/watch?v=v6sF8Ed3nTE
https://www.youtube.com/watch?v=XS8eRtlcCGU
https://www.pinecone.io/learn/langchain-agents/
https://github.com/sophiamyang/tutorials-LangChain/blob/main/LangChain_Overview.ipynb
langchain in colab that store my code base and chain two language models to produce an expert prompt with one and put in second, with summarization of chat history
Pinecone.io
http://stablelm.co/
https://github.com/stability-AI/stableLM/
https://github.com/nomic-ai/gpt4all
https://github.com/acheong08/ChatGPT
Reverse chatgpt, edgegpt
https://lwebapp.com/zh/post/python-chatgpt-api
https://www.youtube.com/watch?v=IvEh7A308FU
https://colab.research.google.com/drive/1CosxSNod48KrkyBn5_vkeleb7u0CrBa6#scrollTo=EiripIMAqGWf
https://github.com/jerpint/buster/blob/main/buster/apps/gradio_app.ipynb
https://huggingface.co/spaces/jerpint/buster
https://www.youtube.com/playlist?list=PLvzuUVysUFOv4iwJE6p1TtuH_I4MFrK50
https://colab.research.google.com/drive/1cVQNg2-zGQb7qZXFECG6kyq5yVIHyf5o?usp=sharing
https://github.com/hackingthemarkets/semantic-search-frontend
https://colab.research.google.com/drive/1tttDqgnWL9yJtmlOFXJqA-BjQ1Pyfpax?usp=sharing
https://github.com/openai/openai-cookbook
https://zhuanlan.zhihu.com/p/621735849
https://zhuanlan.zhihu.com/p/618724929
https://www.youtube.com/watch?v=ffEDkqfIzxM&list=WL&index=116&pp=gAQBiAQB
https://www.youtube.com/watch?v=vDZAZuaXf48&list=WL&index=118&pp=gAQBiAQB
https://github.com/microsoft/semantic-kernel/tree/main
https://learn.microsoft.com/zh-tw/semantic-kernel/
https://github.com/davila7/youtube-gpt
https://github.com/alaminmagaga/Image-Generator-with-OpenAI-API
https://alaminmusamagaga.medium.com/building-an-ai-powered-image-generation-application-with-django-and-openai-api-3e117a35face
https://github.com/jerryjliu/llama_index
https://github.com/gventuri/pandas-ai
https://community.openai.com/t/i-built-an-llm-powered-tool-that-can-comprehend-any-website-structure-and-extract-the-desired-data-in-the-preferred-format/40987
https://towardsdatascience.com/how-i-turned-my-companys-docs-into-a-searchable-database-with-openai-4f2d34bd8736
https://github.com/goldboy225/Awesome-AI-One-Click-Deployment
https://github.com/microsoft/JARVIS
https://github.com/LAION-AI/Open-Assistant
https://huggingface.co/tiiuae/falcon-7b-instruct
https://github.com/billxbf/ReWOO
https://twitter.com/Barret_China/status/1666459451195359233?t=5fb3rOpG1AU2MKPHYIQ3Fg&s=08
https://huggingface.co/spaces/HuggingFaceH4/falcon-chat
https://github.com/imartinez/privateGPT
https://github.com/Mintplex-Labs/anything-llm
https://github.com/PromtEngineer/localGPT
https://huggingface.co/CarperAI/stable-vicuna-13b-delta
https://huggingface.co/spaces/CarperAI/StableVicuna
https://github.com/Stability-AI/StableLM
https://github.com/okisdev/ChatChat
Alpaca
llama.cpp
Vicuna
LLaMA-Adapter
OpenAssistant Conversations - Democratizing Large Language Model Alignment
https://huggingface.co/spaces/trl-lib/stack-llama
https://github.com/ggerganov/llama.cpp
https://github.com/lxe/simple-llm-finetuner
https://github.com/sahil280114/codealpaca
https://github.com/jerryjliu/llama_index
https://github.com/nomic-ai/gpt4all
https://github.com/cocktailpeanut/dalai
https://github.com/hpcaitech/ColossalAI
https://llama-hub-ui.vercel.app/
https://analyticsindiamag.com/metas-llama-leaked-to-the-public-thanks-to-4chan/
https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard
llama
Alpaca
Vicuna
Dolly
WizardLM
Orca
falcon
phi-1
https://github.com/pengbaolin/LLM-Augmenter
https://github.com/lamini-ai/lamini
https://www.lamini.ai/
https://colab.research.google.com/drive/1QMeGzR9FnhNJJFmcHtm9RhFP3vrwIkFn?usp=sharing
https://www.marktechpost.com/2023/07/20/meet-lamini-ai-a-revolutionary-llm-engine-empowering-developers-to-train-chatgpt-level-language-models-with-ease/
https://blog.streamlit.io/how-to-build-a-llama-2-chatbot/
https://towardsdatascience.com/build-your-first-deep-learning-app-within-an-hour-4e80c120e99f
https://lablab.ai/t/ai21-labs-tutorial-how-to-create-a-contextual-answers-app
https://towardsdatascience.com/leveraging-llama-2-features-in-real-world-applications-building-scalable-chatbots-with-fastapi-406f1cbeb935
https://github.com/geekan/MetaGPT/tree/main
https://github.com/geekan/MetaGPT/blob/main/docs/README_CN.md
https://www.marktechpost.com/2023/07/31/meet-rap-and-llm-reasoners-two-frameworks-based-on-similar-concepts-for-advanced-reasoning-with-llms/
https://hackaday.com/2023/07/30/self-hosted-chatbot-focuses-on-privacy/
https://huggingface.co/stabilityai/StableBeluga1-Delta
https://huggingface.co/stabilityai/StableBeluga2
stablechat
WizardMath-70B-V1.0
https://github.com/101dotxyz/GPTeam
https://wandb.ai/ayush-thakur/llama-index-report/reports/Building-Advanced-Query-Engine-and-Evaluation-with-LlamaIndex-and-W-B--Vmlldzo0OTIzMjMy
https://towardsdatascience.com/llamaindex-the-ultimate-llm-framework-for-indexing-and-retrieval-fa588d8ca03e
https://gpt-index.readthedocs.io/en/stable/
https://gpt-index.readthedocs.io/en/latest/core_modules/query_modules/query_engine/root.html
https://github.com/jerryjliu/llama_index
https://zhuanlan.zhihu.com/p/613155165
https://huggingface.co/stabilityai/stablecode-instruct-alpha-3b
https://huggingface.co/Qwen/Qwen-7B
https://github.com/QwenLM/Qwen-7B/blob/main/tech_memo.md
Chatglm
https://towardsdatascience.com/how-to-chat-with-any-file-from-pdfs-to-images-using-large-language-models-with-code-4bcfd7e440bc
https://blog.langchain.dev/gpt-researcher-x-langchain/
https://github.com/chatchat-space/Langchain-Chatchat
https://python.langchain.com/docs/integrations/llms/chatglm
https://www.marktechpost.com/2023/08/09/meet-metagpt-the-open-source-ai-framework-that-transforms-gpts-into-engineers-architects-and-managers/
https://fablestudio.github.io/showrunner-agents/
https://github.blog/2023-07-25-how-to-build-a-gpt-3-app-with-nextjs-react-and-github-copilot/
https://towardsdatascience.com/fine-tune-your-own-llama-2-model-in-a-colab-notebook-df9823a04a32
https://www.techbang.com/posts/108208-the-father-of-c-and-typescript-announce-the-ai-open-source
https://towardsdatascience.com/all-you-need-to-know-to-build-your-first-llm-app-eb982c78ffac
https://github.com/shizhediao/DaVinci
https://github.com/openchatai/OpenCopilot
https://github.com/OpenBMB/ChatDev
Llama 2
https://huggingface.co/blog/codellama
https://github.com/facebookresearch/codellama
CodeLlama-Python and CodeLlama-Instruct
DeciCoder
SantaCoder
Lemur-70B
Chatgpt next web
NotebookLM
Project IDX
https://github.com/KillianLucas/open-interpreter
https://github.com/n4ze3m/dialoqbase
Code Llama in Poe and Perplexity
run code llama on colab
https://github.com/vllm-project/vllm
https://www.helpnetsecurity.com/2023/09/19/llm-guard-open-source-securing-large-language-models/
https://huggingface.co/spaces/Deci/DeciLM-6b-instruct
https://github.com/jerryjliu/llama_index
https://analyticsindiamag.com/now-build-software-engineering-teams-using-ai-in-minutes/
https://github.com/turboderp/exllamav2
BTLM-3B-8K
AutoGen
https://github.com/CStanKonrad/long_llama
LLama 2 Long
Mistral 7B
Orca 2
jina-embeddings-v2
大規模文字嵌入基準排名
SDXL Turbo
https://github.com/patrickloeber/llama-hub
XunziALLM
Mixtral 8x7B
Phi-2
https://makersuite.google.com/app/apikey
https://python.langchain.com/docs/integrations/chat/google_generative_ai
https://twitter.com/LangChainAI/status/1734982565352845428?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1734982565352845428%7Ctwgr%5Eed12d765421df8d620af7916bb47d761ca52beab%7Ctwcon%5Es1_&ref_url=https%3A%2F%2Fanalyticsindiamag.com%2Flangchain-integrates-gemini-pro-api-enables-multimodal-capabilities%2F
whisper
https://www.kocpc.com.tw/archives/520051
https://huggingface.co/FlagAlpha/Llama2-Chinese-7b-Chat
https://catalog.ngc.nvidia.com/orgs/nvidia/teams/playground/models/codellama/overview
https://github.com/msuliot/jupyter_fine_tuning/blob/main/open_ai_fine_tuning.ipynb

bard api
https://github.com/dsdanielpark/Bard-API
https://blog.tensorflow.org/2023/06/augmenting-recommendation-systems-with.html
https://cloud.google.com/vertex-ai?hl=zh_tw
https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models
https://console.cloud.google.com/marketplace/product/colab-marketplace-image-public/colab?pli=1

Huggingface api
https://huggingface.co/docs/transformers/transformers_agents
Huggingface free inference API

Command line application
https://github.com/lxgr-linux/pokete
https://betterprogramming.pub/designing-beautiful-command-line-applications-with-python-72bd2f972ea
https://towardsdatascience.com/how-to-build-and-publish-command-line-applications-with-python-96065049abc1

Command line visualization
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247500786&idx=1&sn=ea7c33617f7fe0cb6afd4d67b5bcd072&chksm=fdc8f4d4cabf7dc29ff75bf66b27b89f37beccb84bfa59fb3f2be519468570449971b90fcf28&scene=21#wechat_redirect

GUI
https://www.51cto.com/article/751631.html
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247499523&idx=1&sn=24f8be16f9131acef084732bd7de8885&chksm=fdc8c825cabf41337fabdd4a925cdaf73dab2e63ce0ef6aeeb59ae157d32a6f8d907cb173aa1&scene=21#wechat_redirect
https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zPpn56Yf3JFuxkXyuLqMPw
https://opensource.com/resources/python/gui-frameworks?intcmp=7016000000127cYAAQ
https://www.youtube.com/watch?v=iM3kjbbKHQU
https://www.youtube.com/watch?v=PIaccbMT6fo
https://youtu.be/Z1N9JzNax2k
https://github.com/zauberzeug/nicegui
customtkinter
react
kivy

Web scraping
https://github.com/Kr1s77/awesome-python-login-model
Urllib、Requests、BeautifulSoup、XPath、Selenium、Scrapy、分布式爬虫
https://github.com/techwithtim/Beautiful-Soup-Tutorial
https://docs.qq.com/doc/DTVJzZXh5TmJSR1V4
https://cloud.tencent.com/developer/article/1932575
https://cloud.tencent.com/developer/article/1711098
https://www.youtube.com/watch?v=ximjGyZ93YQ
https://cloud.tencent.com/developer/article/1805616?from=article.detail.1933412&areaSource=106000.12&traceId=UFNK0ysEGqXdJ11eHR4vk
https://blog.csdn.net/VictoriaSue/article/details/107792075?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-107792075-blog-80965797.pc_relevant_3mothn_strategy_recovery&spm=1001.2101.3001.4242.2&utm_relevant_index=4
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247484076&idx=1&sn=fac8b75e2fbdb8eecff16b1faa4dc7f2&chksm=fdcb358acabcbc9c20769d3800f77f7cafb16844486e2c3fd35b0d567923eeac352189cc6285&scene=21#wechat_redirect
https://python.plainenglish.io/5000-per-hour-web-scraping-legal-site-db4bf949360e
https://www.youtube.com/watch?v=qo_fUjb02ns
https://www.youtube.com/watch?v=mBoX_JCKZTE
https://github.com/NaiboWang/EasySpider
https://blog.csdn.net/ihero/article/details/130805504
playwright-python
https://ost.51cto.com/posts/2352
selenium
https://github.com/Friedrich94326/AI_and_Data_Science/blob/Python/Data%20Acquisition/Web%20Scraping%20with%20Beautiful%20Soup/web_scraping_script.py
douban scraping random sleep ip pool dynamic agent
https://github.com/chuanweihu/Douban-Scraping
https://github.com/jctian96/douban-web-crawler
https://cloud.tencent.com/developer/article/1745516
https://largecats.github.io/blog/2019/06/18/scrape-movie-information/
https://www.instantwatcher.com/iw/us/search
https://unogs.com/
https://flixpatrol.com/
https://elasticsearch.cn/article/14863
https://francis-press.com/papers/12298
https://www.proquest.com/openview/76f584b3840e0bbfa0261544873e52e7/1?pq-origsite=gscholar&cbl=2046140
autoscraper python

search
https://github.com/meilisearch/meilisearch
https://pypi.org/project/LocalitySensitiveHashing/
https://link.medium.com/uWMA4GbFpzb
fuzzywuzzy

transformer.js
https://github.com/xenova/transformers.js
https://huggingface.co/docs/transformers/index


microservices
A microservice is a software architectural style in which a complex application is divided into smaller, independent services that are loosely coupled and communicate with each other over a network. Each microservice focuses on performing a specific business capability and can be developed, deployed, and scaled independently.

The key characteristics of microservices include:

1. **Decentralization**: Microservices promote the decentralization of application components, allowing teams to develop and manage each service independently. This enables faster development, deployment, and scaling.

2. **Independence**: Each microservice operates as an independent entity and can be developed using different technologies or programming languages. This flexibility allows teams to choose the most suitable technology stack for each service.

3. **Loose coupling**: Microservices communicate with each other through lightweight protocols, typically over a network. They can be developed and updated independently, without requiring changes to other services, as long as the communication interface remains intact.

4. **Scalability**: Microservices enable scaling specific services based on demand, rather than scaling the entire application. This flexibility allows resources to be allocated efficiently and ensures that only the necessary components are scaled up.

5. **Resilience**: Microservices are designed to be resilient and fault-tolerant. If one microservice fails, it does not bring down the entire application, as other services can continue to function independently.

6. **Autonomy**: Microservices are typically developed and maintained by small, cross-functional teams. These teams have end-to-end responsibility for their microservices, including development, testing, deployment, and operation.

Microservices architecture is often associated with modern software development approaches such as DevOps and continuous delivery. It offers benefits like increased agility, scalability, and maintainability. However, it also introduces challenges related to distributed systems, service discovery, data consistency, and inter-service communication.

Microservices architecture can be suitable for a wide range of projects, especially those that require flexibility, scalability, and independent development of different components. Here are a few examples of projects that can benefit from implementing a microservices architecture:

1. **Large and complex applications**: If you have a complex application with multiple functionalities, such as an e-commerce platform, a social media network, or an online banking system, implementing microservices can help break down the complexity into smaller, manageable components.

2. **Highly scalable applications**: Projects that anticipate high traffic or demand fluctuations can benefit from microservices. Each service can be scaled independently based on its specific requirements, allowing efficient resource utilization and improved performance.

3. **Diverse technology stack**: If your project requires the use of multiple technologies or programming languages, microservices can provide the flexibility to choose the most suitable technology stack for each service. This is particularly useful when integrating with legacy systems or leveraging specialized tools or frameworks.

4. **Team collaboration**: Microservices can facilitate collaboration among development teams. Each team can focus on a specific microservice, working autonomously and deploying changes without affecting other services. This promotes faster development cycles and empowers teams to take ownership of their services.

5. **Cloud-native applications**: Microservices are well-suited for cloud-native applications that are designed to take advantage of cloud computing capabilities. By using microservices, you can leverage cloud-based infrastructure, auto-scaling, and managed services to build highly scalable and resilient applications.

6. **Third-party integrations**: Projects that involve integrating with external services or APIs can benefit from microservices. Each microservice can handle a specific integration, simplifying the development and maintenance of those integrations.

It's important to note that microservices come with additional complexity compared to monolithic architectures. Therefore, the decision to implement microservices should be based on careful consideration of the project's requirements, team capabilities, and trade-offs associated with distributed systems.

Sure! Let's consider an example of a hypothetical e-commerce platform and how it could be structured as a microservice project.

In this e-commerce platform, we can identify several core functionalities that can be divided into separate microservices:

1. **User Management**: This microservice handles user registration, authentication, and authorization. It manages user profiles, login credentials, and user roles and permissions.

2. **Product Catalog**: This microservice is responsible for managing the product catalog, including product information, categories, pricing, and availability. It provides APIs to retrieve and update product details.

3. **Order Management**: This microservice handles the processing of customer orders. It allows users to add items to their cart, place orders, and handles order fulfillment, payment processing, and order tracking.

4. **Inventory Management**: This microservice tracks the inventory levels of products. It ensures that products are available for purchase and updates the inventory status in real-time to prevent overselling.

5. **Shipping and Logistics**: This microservice handles the shipping and logistics aspects of orders. It integrates with external shipping providers to calculate shipping costs, generate shipping labels, and track package delivery.

6. **Payment Gateway**: This microservice provides secure payment processing functionality. It integrates with different payment providers to handle payment transactions, including credit card processing, digital wallets, and other payment methods.

7. **Analytics**: This microservice collects and analyzes data related to user behavior, sales trends, and other metrics. It generates reports and insights that can be used for business intelligence and decision-making.

Each of these microservices operates independently, with its own database and API endpoints. They can be developed, tested, deployed, and scaled independently, allowing different teams to work on different services simultaneously.

Communication between microservices can be established through lightweight protocols, such as RESTful APIs or messaging systems like RabbitMQ or Apache Kafka. For example, the Order Management microservice may communicate with the Inventory Management microservice to ensure that products are available before placing an order.

By breaking down the e-commerce platform into microservices, we achieve benefits such as scalability, independent deployment, and flexibility to use different technologies for each service. It also allows teams to focus on specific areas of expertise and promotes agility in development and deployment cycles.



weather
https://copyassignment.com/get-weather-forecast-using-python/
https://pypi.org/project/python-weather/
https://blog.51cto.com/u_15333464/3655478
https://blog.51cto.com/u_15467780/4853359
https://blog.51cto.com/u_11949039/5787940
https://blog.51cto.com/lanxf/5629262
https://blog.51cto.com/u_11949039/5787940
get weather python

web scraping + visualization
https://blog.51cto.com/u_15172991/5716498
https://blog.51cto.com/u_15127679/4377481
https://blog.51cto.com/u_15127664/4523335
https://blog.51cto.com/u_15172991/5614722

Web scraping + Data processing + mysql
https://blog.51cto.com/u_9399369/1953469
https://blog.51cto.com/u_15366228/4713110
https://blog.51cto.com/u_14232658/2513385

web scraping + data processing + mysql + django
https://blog.51cto.com/u_9399369/1953469

web scraping
https://zhuanlan.zhihu.com/p/33913257
https://zhuanlan.zhihu.com/p/33929531
https://www.youtube.com/watch?v=zucvHSQsKHA&list=WL&index=147&pp=gAQBiAQB

database
python mysql or other database project
https://github.com/Almas-Ali/FlexDB
https://www.youtube.com/watch?v=gwp3dJUsy5g&list=WL&index=114&pp=gAQBiAQB
https://www.youtube.com/watch?v=LQywWpDoH9s&list=WL&index=115&pp=gAQBiAQB
https://www.youtube.com/watch?v=l8DCPaHc5TQ&list=WL&index=148&pp=gAQBiAQB
https://www.khanacademy.org/computing/computer-programming/sql/
https://sqlzoo.net/wiki/SQL_Tutorial
https://sqlbolt.com/
https://www.youtube.com/@LukeBarousse
https://www.youtube.com/@AlexTheAnalyst
https://www.youtube.com/@TheOyinbooke
https://www.freecodecamp.org/news/sql-and-databases-full-course/
https://www.freecodecamp.org/news/learn-sql-free-relational-database-courses-for-beginners/#relational-database-freecodecamp-curriculum
https://github.com/redis/redis
https://github.com/redis/redis-py
https://github.com/Friedrich94326/AI_and_Data_Science/tree/Python/SQL

mysql
https://www.learncodewithmike.com/2020/02/python-mysql.html
https://www.maxlist.xyz/2018/09/23/python_mysql/

https://note.charlestw.com/python-how-to-connect-sqlite/
https://www.youtube.com/watch?v=girsuXz0yA8&list=WL&index=146&pp=gAQBiAQB
https://www.youtube.com/watch?v=c8yHTlrs9EA&list=WL&index=13&pp=gAQBiAQB
https://www.51cto.com/article/708748.html
https://blog.boot.dev/backend/top-backend-technologies/
https://www.youtube.com/watch?v=7s_8f-h5boE
https://www.coursera.org/specializations/learn-sql-basics-data-science
https://www.linkedin.com/feed/update/urn:li:activity:7037617150181740546/
https://www.linkedin.com/feed/update/urn:li:activity:7038450957025734656/
https://youtu.be/jb2AvF8XzII

Streamlit
https://pythonforundergradengineers.com/streamlit-app-with-bokeh.html

Statistics
Descriptive statistics
Inferential statistics
Mathematical statistics

Exploratory analysis
Data visualization

Feature engineering
Data cleaning
Data wrangling

Dimension reduction
Feature selection
Feature extraction

Machine learning
Regression
Classification
Clustering
Recommendation system
Association rule learning
Time series analysis and forecasting
Model selection
ML pipeline
ML model deployment in Flask

Artificial intelligence
Deep learning
Natural language processing
Computer vision

SQL
Tableau

Data analysis
https://dagshub.com/
https://www.youtube.com/watch?v=iNEwkaYmPqY
https://www.linkedin.com/feed/update/urn:li:activity:7038180582824042497/
https://cloud.tencent.com/developer/article/2166719
https://www.linkedin.com/feed/update/urn:li:activity:7035686267220578304/
https://github.com/sayeemukund/Sayee-Mukund/blob/main/Final%20Project%20Notebook.ipynb
https://www.kaggle.com/competitions/playground-series-s3e8/discussion/389472
https://github.com/flaviobrienza/Diamond_Gem_Price_Prediction/blob/main/Kaggle_Challenge_S3_E8_ChatGPT.ipynb
https://github.com/tinahuangyt/Pandas_Heroes-of-Pymoli/blob/master/Heroes%20of%20Pymoli%20Analysis.ipynb
https://github.com/tinahuangyt/Python_PyBank-and-PyPoll
https://www.youtube.com/watch?v=eMOA1pPVUc4
https://ithelp.ithome.com.tw/users/20107514/ironman/1399
https://www.youtube.com/watch?v=__QUQg96SFs
https://www.youtube.com/watch?v=xi0vhXFPegw
https://www.youtube.com/watch?v=R67XuYc9NQ4
https://www.kaggle.com/datasets/hellbuoy/car-price-prediction?select=CarPrice_Assignment.csv
https://github.com/quadrialli96/MachineLearningProjects
https://www.kaggle.com/code/swatikhedekar/eda-on-netflix-dataset-using-pyhton
https://github.com/tinahuangyt/ETL_Project
https://github.com/praveen-266/Data-Analysis-work
https://www.youtube.com/watch?v=C75TROiiEa0
https://www.coursera.org/learn/introduction-to-data-analytics?specialization=ibm-data-analyst
https://www.coursera.org/learn/data-analysis-with-python
https://www.coursera.org/professional-certificates/google-data-analytics ****
https://www.coursera.org/professional-certificates/ibm-data-analyst ****
https://www.coursera.org/professional-certificates/ibm-data-science ****
https://pll.harvard.edu/course/data-science-wrangling?delta=0
https://pll.harvard.edu/course/data-science-linear-regression?delta=4
https://pll.harvard.edu/course/data-science-machine-learning?delta=3
https://careerfoundry.com/en/blog/data-analytics/data-analytics-portfolio-project-ideas/
web scraping job postings from indeed
datacamp tableau certification
https://skillsforall.com/course/introduction-data-science
https://www.linkedin.com/feed/update/urn:li:activity:7022221537374076928/
https://www.linkedin.com/pulse/what-data-storytelling-ram-narayan/
https://wesmckinney.com/book/
https://www.youtube.com/live/DiXsZSFn4QY?feature=share
https://www.youtube.com/live/eYOaVSB0hdE?feature=share
https://www.youtube.com/live/QZTO3_Aw10s?feature=share
https://github.com/salmankhaliq22/End-to-End-Machine-Learning-Course/blob/main/Notes/Handling-Missing-Data-Complete-Case-Analysis.pdf
https://github.com/salmankhaliq22/End-to-End-Machine-Learning-Course/blob/main/Notes/Handling-Missing-Values-%20Mean-Median-Imputation.pdf
https://www.kaggle.com/code/salmankhaliq22/uk-rtc-prediction-preprocessing/notebook
https://www.kaggle.com/code/salmankhaliq22/mean-median-imputation-of-numerical-features
https://datascience.fm/mega-guide-to-pandas-data-frame-for-data-scientists/
polars vs pandas
https://towardsdatascience.com/a-tutorial-of-what-kaggle-wont-teach-you-web-scraping-data-cleaning-and-more-16d402a206e8
https://towardsdatascience.com/using-data-science-to-look-at-montreals-apartment-rental-crisis-cffea9ee6b00
https://towardsdatascience.com/into-a-new-way-to-classify-nba-players-using-analytics-44e292526e47
https://www.coursera.org/specializations/data-science-python
https://www.youtube.com/watch?v=1pHYKdyRvrw
https://www.youtube.com/watch?v=g6cjhUhrhY8&t=536s
https://codewithemily.wixsite.com/code
https://www.youtube.com/watch?v=GPVsHOlRBBI
https://www.youtube.com/watch?v=rGx1QNdYzvs&list=WL&index=41&t=14s
https://www.youtube.com/watch?v=S2zBHmkRbhY
https://www.youtube.com/watch?v=fkhkvJSHivE
https://god-level-python.notion.site/god-level-python/Data-Analyst-Roadmap-Building-Profile-Portfolio-Projects-ec381aac7a9944e2a529e281c0d2aaf8
https://datascience.fm/mega-guide-to-pandas-data-frame-for-data-scientists/
https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html
http://archive.ics.uci.edu/ml/datasets/turkiye+student+evaluation
https://iamholumeedey007.medium.com/build-your-first-data-science-project-from-your-netflix-data-ba3f89ce83e
https://towardsdatascience.com/building-interactive-data-visualizations-with-python-the-art-of-storytelling-ceb43db67488
https://github.com/suvoooo/Machine_Learning/blob/master/SklearnV1d2/Scikit_Pandas_Output.ipynb
https://towardsdatascience.com/fast-load-data-to-sql-from-python-2d67aea946c0
https://github.com/The-Gupta/TED-Talks-Analysis/tree/main

Data visualization
https://github.com/tinahuangyt/Matplotlib_Pymaceuticals
https://github.com/tinahuangyt/Matplotlib_Pyber
https://towardsdatascience.com/simple-method-of-creating-animated-graphs-127c11f58cc5
https://stackoverflow.com/questions/70472479/plotting-a-barchart-which-should-be-sorted-by-their-rank-using-particular-column
https://www.linkedin.com/pulse/what-data-visualization-datathick/
https://zhuanlan.zhihu.com/p/100949543

excel
https://www.youtube.com/watch?v=weTmydM3fIE
https://www.youtube.com/watch?v=5eLtjO2Hfs0
https://www.youtube.com/watch?v=Q-zO7zetdX8
https://www.youtube.com/watch?v=jV-6P9N4zIg
https://www.youtube.com/watch?v=g4a9x021R9c
https://www.youtube.com/watch?v=9uFKAwIa3V0
Excel is not just about functions; you are missing these 5 essential elements of excel.
The idea behind this post? Recently, one of my readers asked me how to convey a story through a spreadsheet as she was working on some financial model and had 30+ worksheets. Connecting all sheets and conveying a story was a tedious task. Excel is not just about functions and data. You have to present your story meaningfully so that users can link worksheets easily and get the idea behind presenting it.
There are 3 types of excel files
1] Database excel - To store data; generally, banks manage database excel for their business and share them with their managers to present a more holistic picture of the business
2] Dashboard excel - If you visit Miniso next time, ask the store manager to show his store dashboard. That excel tells everything about his store, from stock, sales, and employee's salary, to expenses.
3] Calculative excel - For example, financial model, analysis of research survey excel, etc.
These are the 5 critical elements of excel that one should not miss:
1] Linking Principle - An excel file with 100 worksheets is more complex than just one with single one. In this case, you must manage every worksheet individually and set smooth navigation from one sheet to another. The bonus point, create an index worksheet and show how all sheets are linked with each other if possible.
2] Visual Principle - It is not a reader's fault if you are not getting your message across. Without highlighting and using colour code, a worksheet with 1000 cells filled with data will not tell a story itself. Simplicity is key; use visuals but not at the cost of burying the purpose of a spreadsheet.
3] Technical Principle - It is unnecessary to solve everything in excel with a complex function because users may not be aware of that function and how to deal with it whenever he/she needs some changes. Hence, you use a simple function or put a note on how to deal with it for the users.
4] Printing Principle - Imagine you spent an entire day preparing an excel model, and when you print it, it is not fitting an A4 size page. How frustrating is it? Before starting the excel model, note the worksheet you need to get print copy and design it accordingly. It is not necessary to fit everything on one page. 
5] Message Principle - Going through each worksheet is tiring for the user. Even he/she does not have time to review each sheet and learn how you reached your final result. So, what is the solution? Give a proper headline, summary and notes to each worksheet.

Recommendation system
https://github.com/anthonyli358/spotify-recommender-systems
https://github.com/Qing93/anime_recommend
https://zhuanlan.zhihu.com/p/22494721
https://whuhan2013.github.io/blog/2016/11/07/flask-mysql-learn/
https://github.com/yudong-94/My-Movie-Recommender
https://zhuanlan.zhihu.com/p/365181933
https://github.com/jc-LeeHub/Recommend-System-tf2.0

API
Here are the summarized functions of each API mentioned:
FastAPI: A web framework for building APIs with Python 3.7+.
Requests: A popular library for gathering data from APIs. It allows you to send HTTP requests and work with APIs.
Flask: A lightweight framework for building APIs.
Django REST framework: A framework for building RESTful APIs.
Tweepy: Used to gather and process tweets and other data from Twitter.
PyGithub: Used to gather data about repositories, issues, and pull requests from GitHub.
Twilio: Used to send and receive SMS messages, make voice and video calls, and more.
PyCurl: Used to send HTTP requests with various methods, set headers and cookies, and more.
PyFacebook: Used to access Facebook user profiles, pages, and posts.
Google-api-python-client: Used for working with various Google APIs, such as the Google Drive API, Google Maps API, and more.
aiohttp: Used for building asynchronous HTTP client/server applications to handle a large number of requests and build high-performance web applications and APIs.

API + Data analysis + Data visualization
http://blog.itpub.net/69982434/viewspace-2738661

Data analysis + Data visualization + Web application (css/javascript)
https://github.com/tinahuangyt/Plotly-Biodiversity
https://github.com/tinahuangyt/Leaflet-Earthquake_mapping
https://github.com/tinahuangyt/D3-DataJournalism
https://github.com/tinahuangyt/JavaScript-UFO_Sightings
https://github.com/tinahuangyt/CSS_Web-Visualization-Dashboard

Web scraping + Data visualization + Web application (flask)
https://github.com/tinahuangyt/WebScraping-Mission_to_Mars
https://github.com/tinahuangyt/SQLAlchemy_Climate-Analysis

API + Data analysis + Data visualization
https://github.com/tinahuangyt/Python-API_World-Weather

API
ravenpack sentiment score api

NLP + machine learning
https://github.com/tinahuangyt/Project-NatureGeneticsCitation
https://course.spacy.io/en/p
https://towardsdatascience.com/using-nlp-to-figure-out-what-people-really-think-e1d10d98e491
https://www.youtube.com/playlist?list=PLxqBkZuBynVQEvXfJpq3smfuKq3AiNW-N
https://github.com/tensorflow/tensor2tensor
https://github.com/deepmind/sonnet
https://github.com/ssymmetry/BBT-FinCUGE-Applications
KerasCV
KerasNLP
https://www.kaggle.com/models
https://tfhub.dev/
https://opus.nlpl.eu/

Kaggle
https://zhuanlan.zhihu.com/p/472915303

The Top 5 Python NLP Libraries
Now that we have an understanding of what natural language processing can achieve and the purpose of Python NLP libraries, let’s take a look at some of the best options that are currently available.

1. TextBlob
TextBlob is a Python (2 and 3) library that is used to process textual data, with a primary focus on making common text-processing functions accessible via easy-to-use interfaces. Objects within TextBlob can be used as Python strings that can deliver NLP functionality to help build text analysis applications.

TextBlob’s API is extremely intuitive and makes it easy to perform an array of NLP tasks, such as noun phrase extraction, language translation, part-of-speech tagging, sentiment analysis, WordNet integration, and more.

This library is highly recommended for anyone relatively new to developing text analysis applications, as text can be processed with just a few lines of code.

2. SpaCy
This open source Python NLP library has established itself as the go-to library for production usage, simplifying the development of applications that focus on processing significant volumes of text in a short space of time.

SpaCy can be used for the preprocessing of text in deep learning environments, building systems that understand natural language and for the creation of information extraction systems.

Two of the key selling points of SpaCy are that it features many pre-trained statistical models and word vectors, and has tokenization support for 49 languages.
SpaCy is also preferred by many Python developers for its extremely high speeds, parsing efficiency, deep learning integration, convolutional neural network modeling, and named entity recognition capabilities.

3. Natural Language Toolkit (NLTK)
NLTK consists of a wide range of text-processing libraries and is one of the most popular Python platforms for processing human language data and text analysis. Favored by experienced NLP developers and beginners, this toolkit provides a simple introduction to programming applications that are designed for language processing purposes.

Some of the key features provided by Natural Language Toolkit’s libraries include sentence detection, POS tagging, and tokenization.
Tokenization, for example, is used in NLP to split paragraphs and sentences into smaller components that can be assigned specific, more understandable, meanings.

NLTK’s interface is very simple, with over 50 corpora and lexical resources. Thanks to a large number of libraries made available, NLTK offers all the crucial functionality to complete almost any type of NLP task within Python.

4. Genism
Genism is a bespoke Python library that has been designed to deliver document indexing, topic modeling and retrieval solutions, using a large number of Corpora resources. Algorithms within Genism depend on memory, concerning the Corpus size.
This means it can process an input that exceeds the available RAM on a system.

All the popular NLP algorithms can be implemented via the library’s user-friendly interfaces, including algorithms such as Hierarchical Dirichlet Process (HDP), Latent Dirichlet Allocation (LDA), Latent Semantic Analysis (LSA/LSI/SVD), and Random Projections (RP).

Genism’s accessibility is further enhanced by the plethora of documentation available, in addition to Jupyter Notebook tutorials. However, it should be noted that to use Genism, the Python packages SciPy and NumPy must also be installed for scientific computing functionality.

5. PyNLPl
Last on our list is PyNLPl (Pineapple), a Python library that is made of several custom Python modules designed specifically for NLP tasks. The most notable feature of PyNLPl is its comprehensive library for developing Format for Linguistic Annotation (FoLiA) XML.

The platform is segmented into different packages and modules that are capable of both basic and advanced tasks, from the extraction of things like n-grams to much more complex functions. This makes it a great option for any NLP developer, regardless of their experience level.


Machine learning
https://github.com/ddbourgin/numpy-ml
https://www.linkedin.com/feed/update/urn:li:activity:7037001701962215424/?utm_source=share&utm_medium=member_android
https://github.com/tinahuangyt/MachineLearning-Expoplanet
https://github.com/gregwinther/folk_transformer
https://github.com/gregwinther/musicautobot
https://github.com/gregwinther/magenta
https://empossible.net/academics/emp4301_5301/
https://www.youtube.com/watch?v=fGv6VmfGMLc
https://www.youtube.com/watch?v=yD3BMT_cXew
https://github.com/kyleskom/NBA-Machine-Learning-Sports-Betting
https://github.com/llSourcell/ChatGPT_Trading_Bot/
https://lifelib.io/about.html
https://www.youtube.com/watch?v=8SF_h3xF3cE&list=PLfYUBJiXbdtSvpQjSnJJ_PmDQB_VyT5iU
Feature Engineering and Selection: A Practical Approach for Predictive Models, by Kjell Johnson and Max Kuhn
https://medium.com/plain-simple-software/build-an-ai-text-summarizer-in-python-6209fb23875d
https://python.plainenglish.io/how-machine-learning-can-help-you-purchase-your-next-home-89d9bf771f68
https://towardsdatascience.com/how-to-use-monte-carlo-simulation-to-help-decision-making-a0a164bc8619
Bayesian neural networks
https://github.com/Friedrich94326/AI_and_Data_Science/tree/Python/Machine%20Learning
https://github.com/Friedrich94326/AI_and_Data_Science/tree/Python/Deep%20Learning
https://ai.plainenglish.io/revolutionizing-machine-learning-with-weak-supervision-snorkel-8c319865d6bf
https://medium.com/tide-engineering-team/how-snorkel-a-semi-supervised-learning-technique-solved-invoice-accounting-at-tide-f4a300b8021d
https://github.com/snorkel-team/snorkel

Visualizing map
https://zhuanlan.zhihu.com/p/388573380
https://cloud.tencent.com/developer/article/1933412
https://blog.51cto.com/u_14848199/3809668
https://blog.51cto.com/u_13389043/5166211

big data
Apache Spark, Hadoop, and Kafka are three different technologies used in the field of big data. While they share some similarities, each one serves a distinct purpose.
Hadoop is a distributed data processing framework that is designed to store and process large volumes of structured and unstructured data across multiple servers. It consists of two main components: the Hadoop Distributed File System (HDFS) for storing data and MapReduce for processing data. Hadoop is primarily used for batch processing of large data sets.
Apache Spark, on the other hand, is an in-memory data processing engine that can handle both batch and real-time processing of data. It provides a faster and more flexible alternative to Hadoop's MapReduce for processing large volumes of data. Spark can also be used for machine learning and graph processing.
Kafka, on the other hand, is a distributed messaging system that is used for real-time data streaming. It allows large volumes of data to be ingested in real-time and processed in real-time. Kafka is often used in conjunction with Spark for real-time processing of data.
In summary, Hadoop is primarily used for batch processing, Spark is used for both batch and real-time processing, and Kafka is used for real-time data streaming. Depending on your specific needs, you may use one or more of these technologies in combination to build a robust big data infrastructure.

system design
https://bytebytego.com/
https://www.algoexpert.io/product
https://www.tryexponent.com/coaching?category=mock_interviews&role=swe

Word cloud
https://cloud.tencent.com/developer/article/1931771
https://blog.csdn.net/yimixgg/article/details/80965797
https://python-course.eu/applications-python/python-wordcloud-tutorial.php

consistency model
https://github.com/cloneofsimo/consistency_models

Python + excel
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247500457&idx=1&sn=4f7a84d76129883a7ed94f16a43a8467&chksm=fdc8f58fcabf7c999724243d7955b6982164e9a310b75fa8df75e4965ace76394a83606fff02&scene=21#wechat_redirect

Streamlit
https://mp.weixin.qq.com/s?__biz=MzU4OTYzNjE2OQ==&mid=2247500178&idx=1&sn=61e10fca7a9e1dfd588a4428c9527e4d&chksm=fdc8f6b4cabf7fa2428de25b1fee6601c86f25c26ff4b50372bf303bcfbaa12e8067d2acc76d&scene=21#wechat_redirect
https://medium.com/@joetrankang/i-built-a-customer-retention-dashboard-with-python-and-streamlit-in-under-20-minutes-as-a-data-d49605a2a5c3

File management
https://mp.weixin.qq.com/s/91ZbgtakKUBfodKRYjD8PQ
https://mp.weixin.qq.com/s/w1YkMlOGaU_Ixo1ZyPzx0w

ascii
https://zhuanlan.zhihu.com/p/245651042
https://replit.com/@ArchimedesLi/Desmos-Art-Generator

Opencv
https://realpython.com/face-recognition-with-python/

Tensorflow
https://github.com/RichardFu123/tensorflow/tree/master/CNN

web scraping
https://github.com/s0md3v/Photon
https://github.com/s0md3v/XSStrike
https://google-images-download.readthedocs.io/en/latest/examples.html#

GPT
https://github.com/karpathy/minGPT
https://github.com/karpathy/nanoGPT
https://github.com/Lightning-AI/lit-llama
https://github.com/shyamsn97/mario-gpt
https://github.com/sanjeevanahilan/nanoChatGPT
https://colab.research.google.com/drive/1VyU-W4WcWqQzHSJF1BfdPo9YDBJ6ik8j?usp=sharing
https://www.youtube.com/watch?v=soqTT0o1ZKo
https://github.com/mosaicml/llm-foundry
https://github.com/openlm-research/open_llama

neural network
https://zhuanlan.zhihu.com/p/518189935
https://zhuanlan.zhihu.com/p/461855995
https://zhuanlan.zhihu.com/p/476654345
https://zhuanlan.zhihu.com/p/472200933
https://zhuanlan.zhihu.com/p/427480576
https://zhuanlan.zhihu.com/p/410335242

MCMC
pymc3
bayesian modeling and computation in python

liquid neural network
https://github.com/raminmh/liquid_time_constant_networks
https://arxiv.org/abs/2106.13898
https://github.com/raminmh/CfC
https://github.com/HazyResearch/state-spaces

wolfram
https://writings.stephenwolfram.com/2023/05/the-new-world-of-llm-functions-integrating-llm-technology-into-the-wolfram-language/
https://writings.stephenwolfram.com/2023/06/introducing-chat-notebooks-integrating-llms-into-the-notebook-paradigm/
https://resources.wolframcloud.com/NeuralNetRepository/
https://resources.wolframcloud.com/PromptRepository

tiktok download/douyin download
https://github.com/NeoTheCapt/aweme-algorithm

money
Stripe API

docker
https://levelup.gitconnected.com/docker-for-data-science-projects-a-beginner-friendly-introduction-58e523ebbacb

text classification
https://python-course.eu/machine-learning/introduction-text-classification.php
https://python-course.eu/machine-learning/text-classification-in-python.php
https://pycaret.gitbook.io/docs/get-started/tutorials
https://www.sematic.dev/blog/getting-started-with-sematic-in-5-minutes
Berkeley CS188
https://thinkinfi.com/fasttext-for-text-classification-python/
https://thinkinfi.com/accurate-language-detection-using-fasttext-python/
https://www.tensorflow.org/decision_forests/tutorials/intermediate_colab

Musical score
https://python-course.eu/applications-python/musical-scores-with-python.php
https://python-course.eu/applications-python/fibonacci-to-music-score.php

Rust
https://learn.microsoft.com/en-us/training/paths/rust-first-steps/
https://github.com/rust-lang/rustlings
https://www.youtube.com/watch?v=zF34dRivLOw&ab_channel=TraversyMedia
https://www.youtube.com/watch?v=T_KrYLW4jw8&list=PLzMcBGfZo4-nyLTlSRBvo0zjSnCnqjHYQ&ab_channel=TechWithTim
https://www.youtube.com/playlist?list=PLlrxD0HtieHjbTjrchBwOVks_sr8EVW1x
Python is best suited for high-level tasks such as data analysis, AI, and web development, Rust is ideal for low-level systems programming and high-performance network applications, and C++ is best suited for developing large-scale software systems and performance-critical applications.

new programming language
https://github.com/Ceebox/cbLang
https://www.youtube.com/watch?v=HuVg1trQC64

shell
https://www.udacity.com/course/shell-workshop--ud206
https://www.coursera.org/projects/introduction-to-bash-shell-scripting

big data
https://www.coursera.org/specializations/big-data
https://www.udemy.com/course/hadoopinrealworld/
https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617
https://www.udacity.com/course/learn-spark-at-udacity--ud2002

structure and interpretation of computer programs
https://github.com/DeathKing/Learning-SICP

Courses
1. A JavaScript Course
Course - https://geni.us/LZvS75

2. A Cloud Certification Course
AWS Cloud Practitioner - https://geni.us/X08kfh
https://aws.amazon.com/tw/training/
AWS Solutions Architect - https://geni.us/eZnE
Azure AZ-900 - https://geni.us/ZHsiQq
Azure AZ-104 - https://geni.us/BHx4wLW
Google - https://geni.us/RgVuS6r

3. A 100 Days of X Course
Python - https://geni.us/n80Kf
JavaScript - https://geni.us/TyAC
Data Science - https://geni.us/VguVVp

4. A Linux Course
Course - https://geni.us/gbcU

5. An Algorithm/Coding Interview Course
JavaScript - https://geni.us/WRK31o9
Python - https://geni.us/3LC9C5C

6. An API Design Course
NodeJs - https://geni.us/wu9qk
.NET - https://geni.us/y2H3B

7. A SQL Course
Course - https://geni.us/KRE0

8. A Clean Code Course
Course 1 - https://geni.us/Z8yy
Course 2 - https://geni.us/UYduHpz

9. A "I Want To Be a Senior Dev" Course
Course 1 - https://geni.us/WLN5p
Course 2 - https://geni.us/IW7V6D4

10. A "I Didn't Get A Computer Science Degree Course"
A+ Core 1 - https://geni.us/0UIw
A+ Core 2 - https://geni.us/4dFqqmU
Network+ - https://geni.us/4L1g
Security+ - https://geni.us/KaWhOB

cs50 and cs50p
「CS106A 程式設計方法論」（Programming methodology）
進階課程 CS106B
電腦科學課程（CS107、CS110）

Data Science
https://www.coursera.org/specializations/data-mining
https://www.coursera.org/specializations/statistics-with-python
https://www.coursera.org/learn/python-for-data-visualization
https://www.datacamp.com/tracks/data-visualization-with-python
https://www.udacity.com/course/data-analysis-and-visualization--ud404
https://www.udemy.com/course/mastering-python-data-handling-analysis-and-visualization/
https://www.udacity.com/course/programming-for-data-science-nanodegree--nd104
https://www.coursera.org/search?topic=Data%20Science&index=prod_all_launched_products_term_optimization&entityTypeDescription=Guided%20Projects&irclickid=UItxB8RI4xyNTs0Wn2xe3Qw9UkAUlA3hcyHAVA0&irgwc=1&utm_medium=partners&utm_source=impact&utm_campaign=3637364&utm_content=b2c
https://www.coursera.org/search?index=prod_all_launched_products_term_optimization&entityTypeDescription=Guided%20Projects&topic=Computer%20Science&irclickid=UItxB8RI4xyNTs0Wn2xe3Qw9UkAUlFRRcyHAVA0&irgwc=1&utm_medium=partners&utm_source=impact&utm_campaign=3637364&utm_content=b2c
https://www.coursera.org/search?index=prod_all_launched_products_term_optimization&entityTypeDescription=Guided%20Projects&topic=Business&irclickid=UItxB8RI4xyNTs0Wn2xe3Qw9UkAUlFRRcyHAVA0&irgwc=1&utm_medium=partners&utm_source=impact&utm_campaign=3637364&utm_content=b2c
Data structure
Data aggregation

AI For Business
https://www.coursera.org/specializations/ai-for-business-wharton
https://www.coursera.org/professional-certificates/google-it-automation

Azure for all
https://learn.microsoft.com/zh-tw/training/browse/?roles=ai-engineer
test
https://learn.microsoft.com/zh-tw/certifications/browse/?roles=ai-engineer

AI for everyone
https://www.coursera.org/learn/ai-for-everyone?action=enroll&irclickid=0ocwtz0ecxyNWfrQtGQZjznDUkA3s7XymSWswU0&irgwc=1&utm_campaign=1359989&utm_content=b2c&utm_medium=partners&utm_source=impact
follow up course
https://www.coursera.org/deeplearning-ai
https://huggingface.co/course/chapter1/1

Startup
https://startupclass.samaltman.com/


Useful python libraries
PDFMiner - extract text from PDF
camelot - extract tables from PDF
pypdf - pdf
livepython - track variables in runtime
ftfy - fix text encoding
rich - text with color and style, codeblock and table
icecream - debug logging also print class and variable
loguru - logging simple
import pdb; pdb.set_trace() - debug
breakpoint() - debug
Pendulum - dates and times
argparse - build command line interface
tqdm - show progress bar
xarray - dealing with multi-dimensional arrays
pydantic - data validation and like dataclass
fastapi - web framework, better than flask
sqlmodel - connect fastapi app with database like sqlite, mysql
httpx - http client
python-dotenv - load environment variables

Job oriented courses
https://careerhackers.io/chp-landing/
https://tecky.io/en/courses/SMA/
https://code.tecky.io/
https://www.dataquest.io/plans/
https://www.domestika.org/en/courses/64-introduction-to-data-visualization
https://www.bootcamp.lejhro.com/
https://courses.earnandexcel.com/data-science-course-us
https://courses.earnandexcel.com/5-web-developer-courses
https://www.learnfly.com/the-complete-web-development-2023-bootcamp
https://mathematicbooks.com/product/python-for-programmers-with-big-data-and-artificial-intelligence-case-studies
https://www.udemy.com/course/data-science-real-world-projects-in-python-x/
https://sparkaacademy.com/data-science-ml-immersive-quantum-bootcamp/
https://danger.education/targeted-training-for-data-analysis-tc/
https://fmlanding.kaplan.com.hk/courses/certificate-in-data-analysis-fundamentals-with-sql-python/
https://www.coursera.org/professional-certificates/ibm-full-stack-cloud-developer
https://www.coursera.org/professional-certificates/devops-and-software-engineering
https://www.coursera.org/specializations/java-programming
https://www.udemy.com/course/python-programming-beyond-the-basics-intermediate-training/?couponCode=ED44ACD62524527688A9


